{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.hy": "clamp(head_yaw,-90,90)",
			"var.nose_rx": "if( varb.fcc, var.nose_rx, nose.rx )",
			"var.count_swim": " clamp(if(varb.fcc, var.count_swim, !is_riding&&!is_on_ground&&is_in_water, min(40, var.count_swim  +0.1 *frame_time*40), max(0, var.count_swim  -0.1 *frame_time*40)), 0, 1)",
			"var.r": "(pi*random(id)*2) + (limb_swing/20)",
			"var.b": "age/60*pi*2 +var.r",
			"var.ls": "limb_swing /1.2",
			"var.swim": "limb_swing/2 +age/3",
			"var.potion": "clamp(if(varb.fcc, var.potion, var.nose_rx<torad(-10), min(20, var.potion +0.4 *frame_time*20), max(0, var.potion -0.4 *frame_time*20)), 0, 1)",
			"var.ylook": "clamp(sin(var.r+age/60)*6, 0, 1)*1.2",
			"var.nov1": "if(is_aggressive, 0, (0.5-0.5*cos( clamp(-5.6 +cos(-pi/6 +var.r +age/80)*6, 0, 1)*pi )) )*clamp(2-limb_speed*4, 0, 1)",
			"var.yrot_offset": "if( varb.fcc, var.yrot_offset, var.yrot_offset +if( between( var.pre_roty-rot_y, -pi*2, -pi*2+0.2 ), -pi*2, between( var.pre_roty-rot_y, pi*2-0.2, pi*2 ), pi*2, 0 ) )",
			"var.roty": "rot_y +var.yrot_offset",
			"var.head_rot": "if( varb.fcc, var.head_rot, age<9, var.pre_headroty+if(is_riding,0,var.roty), (var.pre_headroty+if(is_riding,0,var.roty))*min(1,frame_time*16) +var.head_rot*max(0,1-frame_time*16) )",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"head.rx": "torad(head_pitch)/1.5 -torad(15)*limb_speed +if(!is_riding&&!is_on_ground&&is_in_water, cos(var.swim*2)/30 +torad(-5) +torad(-10*clamp(limb_speed*8, 0, 1)), 0) +torad(-10)*var.potion",
			"head.ry": "torad(var.hy)/(1.8 -0.3*var.ylook) +if( !is_riding&&!is_on_ground&&is_in_water, -sin(var.swim  )/8, sin(var.ls)/5*limb_speed/1.3)",
			"head.rz": "cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.tx": "                                        sin(torad( 45)+var.ls)    *limb_speed/1.3",
			"head.ty": "if(!is_riding&&!is_on_ground&&is_in_water, -sin(var.swim*2)/2        , 0.3             +sin(torad( 135)+var.ls*2)*1.5*limb_speed/1.3 ) +sin(var.b)/4 +14*var.count_swim +if(is_riding, 10, 0)",
			"head.tz": "if(!is_riding&&!is_on_ground&&is_in_water, -clamp(limb_speed*8, 0, 1), -1.2*limb_speed -sin(torad(-135)+var.ls  )    *limb_speed/1.3 -1.2 ) -sin(var.b)/4 +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head2.rx": "head.rx -torad(5) -sin(var.b)/40 +(sin(torad(45)+var.ls*2)/6*limb_speed/1.3)*(1-var.potion) +(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head2.ry": "head.ry",
			"head2.rz": "head.rz +sin(torad(45)+var.ls)/10*limb_speed/1.3*(1-var.potion)",
			"body.rx": "if( !is_riding&&!is_on_ground&&is_in_water, torad(20)*clamp(limb_speed*8, 0, 1), ((sin(var.b)/40)*(1-limb_speed)) +torad(5)*limb_speed +sin(torad(-135)+var.ls)/6*limb_speed/1.3 ) +torad(5) -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"body.ry": "if( !is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/8                           , torad(var.hy)/6*clamp(1-limb_speed*2, 0, 1) -sin(var.ls)/5*limb_speed/1.3 )",
			"body.rz": "if( !is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/30*clamp(limb_speed*8, 0, 1), sin(torad( 45)+var.ls)/15 *limb_speed/1.3 ) -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*0",
			"body.tx": "head.tx",
			"body.ty": "head.ty",
			"body.tz": "head.tz"
		},
		{
			"arms.rx": "if(!is_riding&&!is_on_ground&&is_in_water, sin(pi/4+var.swim*2  )/16 -torad(20-10*var.potion) -body.rx, 0) +(torad(-30) -torad(15)*limb_speed -sin(torad(135)+var.ls*2)/4*limb_speed/1.3)*var.potion +(sin(var.ls*2)/4*limb_speed/1.3 +sin(var.b-torad(90))/50 +(torad(-15)*limb_speed))*(1-var.potion) +torad(-45) +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"arms.ry": "if(!is_riding&&!is_on_ground&&is_in_water, sin(pi/4+var.swim  +sin(pi/4+var.swim*2)/3)/6, 0) +(                                                sin(           var.ls  )/5*limb_speed/1.3)*var.potion +if(limb_speed>=0.8, sin(torad(45)+var.ls)/4*limb_speed, 0)*(1-var.potion) +torad(var.hy)/6",
			"arms.rz": "-body.rz/4",
			"arms.tx": " head.tx",
			"arms.ty": "if(!is_riding&&!is_on_ground&&is_in_water, 2.5 +body.ty, 3.5 +body.ty*var.potion +(sin(var.b-torad(60))/5 +sin(torad(90)+var.ls*2)*1.5*limb_speed/1.3)*(1-var.potion)) +if(is_riding, 10-10*var.potion, 0)",
			"arms.tz": "if(!is_riding&&!is_on_ground&&is_in_water,      head.tz, 0) -2.5 -1*var.potion +(-sin(torad(-135)+var.ls)*limb_speed/1.3)*(1-var.potion) -sin(var.b)/4 +(-1.2*limb_speed)"
		},
		{
			"right_leg.rx": "if(is_riding, torad(-85), !is_riding&&!is_on_ground&&is_in_water,  cos(pi/4+var.swim-sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), clamp(torad(-5 )+limb_speed/1.5, torad(-5 ), 0) +((sin(var.b)/40)*(1-limb_speed)) +sin( pi/8 +var.ls -sin(pi/8 +var.ls)/3 )*limb_speed +torad(10)*limb_speed) -torad(var.hy)/30 +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg.rx": " if(is_riding, torad(-85), !is_riding&&!is_on_ground&&is_in_water, -cos(pi/4+var.swim+sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), clamp(torad( 5 )-limb_speed/1.5, 0, torad( 5 )) +((sin(var.b)/40)*(1-limb_speed)) -sin( pi/8 +var.ls +sin(pi/8 +var.ls)/3 )*limb_speed +torad(10)*limb_speed) +torad(var.hy)/30 +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_leg.ry": "if(!is_riding&&!is_on_ground&&is_in_water, body.ry, clamp(torad( 5 )-limb_speed, 0, torad( 5 )) +if(is_riding, torad( 20), 0))",
			"left_leg.ry": " if(!is_riding&&!is_on_ground&&is_in_water, body.ry, clamp(torad(-8 )+limb_speed, torad(-8 ), 0) +if(is_riding, torad(-20), 0))",
			"right_leg.rz": "if(!is_riding&&!is_on_ground&&is_in_water, 0, clamp(torad( 1 )-limb_speed, 0, torad( 1 )) ) -(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg.rz": " if(!is_riding&&!is_on_ground&&is_in_water, 0, clamp(torad(-1 )+limb_speed, torad(-1 ), 0) ) +(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_leg.tx": "-2",
			"left_leg.tx": "  2",
			"right_leg.ty": "0.2 +clamp(12 +(sin(torad( 90)+var.ls)*3)*limb_speed +(1*limb_speed), 0, 12.2) +if(is_riding, 10, if(!is_riding&&!is_on_ground&&is_in_water, head.ty -0.8*clamp(limb_speed*8, 0, 1), 0)) -sin(hurt_time*pi/10)*2",
			"left_leg.ty": " 0.2 +clamp(12 +(sin(torad(-90)+var.ls)*3)*limb_speed +(1*limb_speed), 0, 12.2) +if(is_riding, 10, if(!is_riding&&!is_on_ground&&is_in_water, head.ty -0.8*clamp(limb_speed*8, 0, 1), 0)) -sin(hurt_time*pi/10)*2",
			"right_leg.tz": "if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 -sin(pi/4+var.swim) -cos(pi/4+var.swim), -sin(var.ls +sin(var.ls)/3 )*1.3*limb_speed -limb_speed/2 +if(is_riding, 0, -sin(var.b)/3) +torad(var.hy)/2)",
			"left_leg.tz": " if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 +sin(pi/4+var.swim) +cos(pi/4+var.swim),  sin(var.ls -sin(var.ls)/3 )*1.3*limb_speed -limb_speed/2 +if(is_riding, 0, -sin(var.b)/3) -torad(var.hy)/2)"
		},
		{
			"hat.rx": "head2.rx",
			"hat.ry": "head2.ry",
			"hat.ty": "head2.ty +if(is_hurt, clamp(sin(hurt_time/2)*5, -10, 0), 0)",
			"hat.rz": "head2.rz +if(is_hurt&&hat.ty<(-24), -sin(hurt_time/2+limb_swing)/3, 0)",
			"hat.tx": "head2.tx +if(is_hurt&&hat.ty<(-24), (-hat.rz)*5, 0)",
			"bone4.rx": "-sin(torad( 90   )+var.ls*2)/14",
			"bone5.rx": "-sin(torad( 90-20)+var.ls*2)/8",
			"bone6.rx": "-sin(torad( 90-40)+var.ls*2)/4",
			"bone4.rz": "-sin(torad( 90   )+var.ls)/16",
			"bone5.rz": "-sin(torad( 90-20)+var.ls)/10",
			"bone6.rz": "-sin(torad( 90-40)+var.ls)/5",
			"nose.rx": "var.nose_rx+torad(10)",
			"nose.ry": "-head.ry",
			"nose.rz": "-head.rz",
			"nose.tx": "0",
			"nose.ty": " 0.2 -(sin(torad(135)+var.ls*2)*1.5*limb_speed/1.3)",
			"nose.tz": "-3.2"
		},
		{
			"brow.ty": "-0.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 +clamp(-torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +if(is_aggressive, -1 +sin(-var.r)/3, 0) -sin(hurt_time*pi/10) +if(limb_speed>0.5, sin(pi/4+var.ls*2)/4*limb_speed*(1+random(sin(id))), 0) -sin(pi*swing_progress) -0.2*var.nov1",
			"brow.rz": "      clamp( sin(var.r+age /110), 0, torad( 5)) +if(is_aggressive, torad( 10), 0)",
			"nose2.rx": "-torad(20)*var.potion       +cos(var.ls*2)/8*limb_speed +clamp(-torad(head_pitch)/3 +sin(pi*2*swing_progress)/2, -pi/4, pi/40) -sin(hurt_time*pi/10)/3",
			"nose2.rz": " torad( 5)*var.potion +clamp(cos(var.ls  )/6*limb_speed -torad(var.hy)/6*clamp(2-limb_speed*4, -1.5, 0) +(var.head_rot-var.pre_headroty-if(is_riding,0,var.roty))*2, -pi/4, pi/4)/2 -head.rz/2",
			"mouth.rz": "(torad(7)*clamp(10-sin(-0.05 +var.r+age/100)*20, 0, 1) +clamp(var.hy/500, torad(-10), torad(10)))*(1-2*random(id))",
			"mouth.tx": "        1*clamp(10-sin(       var.r+age/100)*20, 0, 1)*(1-2*random(id))",
			"mouth.ty": "1    +0.2*clamp(10-sin(       var.r+age/100)*20, 0, 1)",
			"var.wartx": "round( sin(random(id)*pi*10)*1.5 -0.5 )",
			"var.warty": "round( sin(random(id)*pi*15)*1.5 -0.5 )",
			"wart.ty": "2 +clamp(var.warty, -2, 1)",
			"wart.tx": "0.5 +clamp(var.wartx, -1, 0)",
			"wart.ry": "torad( 90*(clamp(-var.wartx-1,0,1)+clamp(-var.wartx,-1,0)) )"
		},
		{
			"var.blink": "pow( clamp(1.5 -abs(sin(var.r+age/8)*6), 0, 1)*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1), 2 )",
			"var.eye_top": "( clamp(head_pitch/60, -0.8, 0.5) +if(is_aggressive, -0.6 +sin(-random(id))/3, 0) -sin(pi*2*swing_progress)/2 +clamp(2*var.nov1, 0, 0.3) -sin(hurt_time*pi/10) )*(1-var.blink) +var.blink",
			"var.pupil_y": "clamp(head_pitch/80, -0.5, 0.5) +if(is_aggressive, -1 +sin(-var.r)/2, 0)/4 -sin(pi*swing_progress)/4 +clamp(2*var.nov1, 0, 0.3) -sin(hurt_time*pi/10)/2",
			"var.pupil_x": "-var.hy/if(is_aggressive, 180, 80 +160*var.ylook)",
			"var.r_pupil_x": "var.pupil_x  +(-sin(pi/4+var.r+age/10)*3 -0.3 )*clamp(var.nov1*4, 0, 1) -sin(hurt_time*pi/10)*sin(limb_swing/3)/4",
			"var.l_pupil_x": "var.pupil_x  +(-sin(pi/4+var.r+age/10)*3 +0.3 )*clamp(var.nov1*4, 0, 1) +sin(hurt_time*pi/10)*sin(limb_swing/3)/4",
			"r_eye_white.sy": "clamp(1 -var.eye_top +brow.rz*2 -brow.ty*abs(clamp(brow.rz,-1,1)), 0, 3 )",
			"l_eye_white.sy": "clamp(1 -var.eye_top -brow.rz*2 -brow.ty*abs(clamp(brow.rz,-1,1)), 0, 3 )",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.r_pupil_x+1,  0, 1 )-2",
			"l_pupil.tx": "clamp( var.l_pupil_x-1, -1, 0 )+2",
			"r_pupil.ty": "clamp( var.pupil_y+1, -r_eye_white.sy+1 +min( 0.4, r_eye_white.sy ), 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+1, -l_eye_white.sy+1 +min( 0.4, l_eye_white.sy ), 1 )",
			"r_pupil.sy": "min( clamp(1 +var.pupil_y +r_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), r_eye_white.sy )",
			"l_pupil.sy": "min( clamp(1 +var.pupil_y +l_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), l_eye_white.sy )",
			"r_pupil.sx": "clamp(1 +clamp(-var.r_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.l_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0",
			"var.distance": "clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) )-3, 0, 128 )",
			"face.tz": "-5.5 -var.distance/500",
			"r_pupil.tz": "-var.distance/500",
			"l_pupil.tz": "-var.distance/500",
			"brow.tz": "-var.distance/400"
		},
		{
			"var.pre_roty": "rot_y",
			"var.pre_headroty": "head.ry",
			"var.frame_counter_prev": "frame_counter"
		}
	]
}