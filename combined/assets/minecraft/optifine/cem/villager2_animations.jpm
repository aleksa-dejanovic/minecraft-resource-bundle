{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.count_sleep": "clamp(if(limb_speed<=0.1&&!is_hurt, min(20, var.count_sleep +0.005 *frame_time*20), max(0, var.count_sleep -0.1 *frame_time*20)), 0, 1)",
			"var.sleep": "clamp(var.count_sleep*10 -9, 0, 1)",
			"var.testing": "0",
			"var.headx": "if( varb.fcc, var.headx, head.rx )",
			"var.r": "pi*random(id)*4",
			"var.b": "age /(11 -random(id)*2)*if(is_child, 1.5, 1)",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"head.rx": "(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(0.15 -sin(var.r +var.b -cos(var.r +var.b)*var.sleep)/40 -pi/2*var.testing)",
			"head.ry": "clamp(torad(head_yaw)/1.8, -pi/3, pi/3)",
			"head.rz": "cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.tx": "0",
			"head.ty": "0.3 +if(is_riding, 5, 0) +24*var.testing",
			"head.tz": "(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -1",
			"head.sx": "if(is_child, 1.5, 1)",
			"head.sy": "head.sx",
			"head.sz": "head.sx",
			"nose.ty": "0",
			"body.rx": "sin(var.r +var.b)/60 -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(-pi/2*var.testing)",
			"body.ry": "clamp(torad(head_yaw)/12*clamp(1-limb_speed*2, 0, 1), -pi/16, pi/16)",
			"body.rz": "head.rz -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"body.tx": "head.tx",
			"body.ty": "head.ty",
			"body.tz": "head.tz +(1 -sin(var.r +var.b)/6)"
		},
		{
			"arms_rotation.tx": "0",
			"arms_rotation.ty": "0.7*random(id) +0.3 -22.75 +sin(var.r +var.b-torad(60))/7",
			"arms_rotation.tz": "0",
			"arms_rotation.rx": "torad(-40) +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"arms_rotation.ry": "clamp(torad(head_yaw)/4*clamp(1-limb_speed*2, 0, 1), -pi/8, pi/8)",
			"arms_rotation.rz": "0",
			"arms.rx": "body.rx",
			"arms.ry": "body.ry",
			"arms.rz": "body.rz",
			"arms.tx": "body.tx",
			"arms.ty": "body.ty",
			"arms.tz": "body.tz"
		},
		{
			"right_leg.rx": "if(is_riding, 0, -torad(head_yaw)/30    *clamp(1-limb_speed*2, 0, 1) )",
			"left_leg.rx": " if(is_riding, 0,  torad(head_yaw)/30    *clamp(1-limb_speed*2, 0, 1) )",
			"right_leg.ry": "if(is_riding, 0,  torad(head_yaw)/6 /2  *clamp(1-limb_speed*2, 0, 1) )",
			"left_leg.ry": " if(is_riding, 0,  torad(head_yaw)/6 /2  *clamp(1-limb_speed*2, 0, 1) )",
			"right_leg.rz": "if(is_riding, 0, -torad(head_yaw)/45/2.5*clamp(1-limb_speed*2, 0, 1) +(head.tx)/10 )",
			"left_leg.rz": " if(is_riding, 0, -torad(head_yaw)/45/2.5*clamp(1-limb_speed*2, 0, 1) +(head.tx)/10 )",
			"right_leg.tx": "-2",
			"left_leg.tx": "  2",
			"right_leg.ty": "24 +if(is_riding, 5, 0) -sin(hurt_time*pi/10)*2 +(12*var.testing)",
			"left_leg.ty": " 24 +if(is_riding, 5, 0) -sin(hurt_time*pi/10)*2 +(12*var.testing)",
			"right_leg.tz": "(-11*var.testing -0.5)",
			"left_leg.tz": " (-11*var.testing -0.5)",
			"right_leg2.rx": "if(is_riding, -torad(80), 0) +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(-pi/2*var.testing)",
			"left_leg2.rx": " if(is_riding, -torad(80), 0) +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(-pi/2*var.testing)",
			"right_leg2.ry": "if(is_riding,  torad(20), 0)",
			"left_leg2.ry": " if(is_riding, -torad(20), 0)",
			"right_leg2.rz": "-(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +torad(4*random(id))",
			"left_leg2.rz": "  (sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -torad(4*random(id))"
		},
		{
			"nose2.rx": "(-cos(limb_swing/2)/4 -torad(20))*2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +clamp(cos(-pi/6+var.r+var.b)/6 +sin(age*1.9)/20*cos(var.r+var.b), -1, 0)*var.sleep",
			"nose2.rz": "clamp(-torad(head_yaw)/6*clamp(2-limb_speed*4, -1.5, 0), -pi/4, pi/4)/2 -head.rz/2 +(torad(head_yaw)/3 +sin(age*1.7)/40*clamp(cos(var.r+var.b), -1, 0))*var.sleep",
			"mouth.rz": "(clamp(head_yaw/500, torad(-10), torad(10)) +torad(7)*clamp(-sin(-torad(1) +var.r+age/100)*20, 0, 1) )*(1-2*random(id))",
			"mouth.sx": "1 -clamp(-cos(-pi/4+var.r+var.b +sin(-pi/4+var.r+var.b)) +0.7, -1, 1.5)/4*var.sleep",
			"mouth.sy": "1 +clamp(-cos(-pi/4+var.r+var.b +sin(-pi/4+var.r+var.b))/2 +0.3, -1, 1 )/1.3*var.sleep",
			"mouth.tx": "0",
			"mouth.ty": "2.3-mouth.sy*1.3",
			"brow.rz": "torad(clamp( var.hy/9, -10, 10)*(0.3+0.7*random(id)))*clamp(-sin(var.r+age/80)*6, 0, 1)  +( sin(var.ls +cos(var.ls/1.25))/(2.5-random(id)*2)/6)*var.scared -sin(limb_swing/1.5)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"var.brows_y": "-0.5 +if(is_child, -0.25 -0.25*clamp(cos(var.r+age/120)*10, 0, 1)*(1-var.sleep), 0) +clamp( 1 -sin(var.r+age /110)*4, -0.3, 0 )*(1-var.sleep)  +(clamp(-torad(head_yaw)/2, -0.5, 0) +clamp( torad(head_yaw)/2, -0.5, 0))*clamp(-sin(var.r+age/80)*6, 0, 1) -sin(hurt_time*pi/10)*(1.5 +sin(limb_swing/3)) +if(is_child, -0.75, 0)*clamp(limb_speed*6, 0, 1)",
			"brow.ty": "      var.brows_y",
			"right_brow.ty": "var.brows_y",
			"left_brow.ty": " var.brows_y"
		},
		{
			"var.blink": "pow( clamp(( 1.5 -abs(sin(var.r+age/8)*3))*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1), 0.6 +0.4*var.sleep, 1), 2 )",
			"var.eyes_top": "( (-1.5 -cos(limb_swing/3)/2)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) )*(1-var.sleep)",
			"var.r_eye_top": "( var.eyes_top  +(-0.5-1*random(id) -sin(var.ls +cos(var.ls/1.25))/6 -sin(var.r/1.3)/6 +sin(var.ls*2)/4)*var.scared )*(1-var.blink) +var.blink",
			"var.l_eye_top": "( var.eyes_top  +(-0.5-1*random(id) +sin(var.ls +cos(var.ls/1.25))/6 +sin(var.r/1.3)/6 +sin(var.ls*2)/4)*var.scared )*(1-var.blink) +var.blink",
			"var.pupil_y": "clamp(sin(var.r+age/38) +sin(var.r+age/13), -0.1, 0.1)*clamp(-20*2 -cos(var.r+age/125)*30*2, 0, 1) -clamp(-24 +sin(var.r+age/100)*40, 0, 1)/10 +(-1.5 -cos(limb_swing/3)/2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -if(between(random(id), 0, 0.2), -torad(10)*clamp(sin(limb_speed*3), 0, 1), 0) +if(is_child, -0.25, 0)*clamp(limb_speed*6, 0, 1)",
			"var.pupil_x": "-head_yaw/80 +clamp(sin(var.r+age/27) +sin(var.r+age/16), -0.1, 0.1)*clamp(-20*2 -cos(var.r+age/125)*30*2, 0, 1)*clamp(59*4 -sin(var.r+age/187)*60*4, 0, 1)",
			"var.r_pupil_x": "var.pupil_x +(-sin(pi/4+var.r+age/10)*3 -0.3 )*clamp(var.nov1*4, 0, 1) -0.3*var.scared",
			"var.l_pupil_x": "var.pupil_x +(-sin(pi/4+var.r+age/10)*3 +0.3 )*clamp(var.nov1*4, 0, 1) +0.3*var.scared",
			"r_eye_white.sy": "clamp(1 -var.r_eye_top, 0, 3 )",
			"l_eye_white.sy": "clamp(1 -var.l_eye_top, 0, 3 )",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.r_pupil_x+1,  0, 1 )-2",
			"l_pupil.tx": "clamp( var.l_pupil_x-1, -1, 0 )+2",
			"r_pupil.ty": "clamp( var.pupil_y+1, -r_eye_white.sy+1 +min( 0.4 +0.6*var.scared, r_eye_white.sy ), 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+1, -l_eye_white.sy+1 +min( 0.4 +0.6*var.scared, l_eye_white.sy ), 1 )",
			"r_pupil.sy": "min( clamp(1 +var.pupil_y +r_eye_white.sy-1, 0.4 +0.6*var.scared, clamp( -var.pupil_y+1, 0.5 +0.5*var.scared, 1 ) ) -0.2*var.scared, r_eye_white.sy )",
			"l_pupil.sy": "min( clamp(1 +var.pupil_y +l_eye_white.sy-1, 0.4 +0.6*var.scared, clamp( -var.pupil_y+1, 0.5 +0.5*var.scared, 1 ) ) -0.2*var.scared, l_eye_white.sy )",
			"r_pupil.sx": "clamp(1 +clamp(-var.r_pupil_x, -0.2, 0 )*(1-var.scared) -0.2*var.scared, 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.l_pupil_x, -0.2, 0 )*(1-var.scared) -0.2*var.scared, 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0",
			"var.distance": "clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) )-3, 0, 128 )",
			"face.tz": "-4 -var.distance/500",
			"r_pupil.tz": "-var.distance/500",
			"l_pupil.tz": "-var.distance/500",
			"brow.tz": "-var.distance/400",
			"right_brow.tz": "brow.tz",
			"left_brow.tz": "brow.tz"
		}
	]
}