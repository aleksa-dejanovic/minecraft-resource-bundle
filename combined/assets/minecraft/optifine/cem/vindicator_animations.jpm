{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.hy": "clamp(head_yaw,-90,90)",
			"var.testing": "0",
			"var.right_arm_rx": "if( varb.fcc, var.right_arm_rx, right_arm.rx )",
			"var.left_arm_rx": " if( varb.fcc,  var.left_arm_rx,  left_arm.rx )",
			"var.right_arm_ry": "if( varb.fcc, var.right_arm_ry, right_arm.ry )",
			"var.left_arm_ry": " if( varb.fcc,  var.left_arm_ry,  left_arm.ry )",
			"var.right_arm_rz": "if( varb.fcc, var.right_arm_rz, right_arm.rz )",
			"var.left_arm_rz": " if( varb.fcc,  var.left_arm_rz,  left_arm.rz )",
			"varb.swim": "! is_riding && ! is_on_ground && is_in_water",
			"var.cswim": " clamp(if(varb.swim, min(20, var.cswim  +0.2 *frame_time*20), max(0, var.cswim  -0.2 *frame_time*20)), 0, 1)",
			"var.r": "pi*random(id)*4",
			"var.b": "age /(11 -random(id)*2)",
			"var.ls": "limb_swing/if( limb_speed>0.5, 1.6, 1.1 )",
			"var.sb": "limb_swing/2 +age/4",
			"var.ws": "clamp(limb_speed*6.1, 0, 1)*clamp(2-limb_speed*3, 0, 1)",
			"var.run": "clamp(if(limb_speed>0.5, min(20, var.run +0.1 *frame_time*20), max(0, var.run -0.1 *frame_time*20)), 0, 1)",
			"var.walk": "clamp(1-var.run, 0, 1)",
			"var.win": "if(var.right_arm_rz==2.670354 && var.left_arm_rz==-2.3561945, 1, 0)",
			"var.melee": "if(is_aggressive&&!is_in_water, if( var.right_arm_rx<var.left_arm_rx && !equals(var.left_arm_rx, var.right_arm_rx, 0.1), -1, var.left_arm_rx<var.right_arm_rx && !equals(var.left_arm_rx, var.right_arm_rx, 0.1), 1, 2), 0)",
			"var.cRmelee": "clamp(if(var.melee==-1, min(20, var.cRmelee +0.2 *frame_time*20), max(0, var.cRmelee -0.2 *frame_time*20)), 0, 1)",
			"var.cLmelee": "clamp(if(var.melee== 1, min(20, var.cLmelee +0.2 *frame_time*20), max(0, var.cLmelee -0.2 *frame_time*20)), 0, 1)",
			"var.cEmelee": "clamp(if(var.melee== 2, min(20, var.cEmelee +0.2 *frame_time*20), max(0, var.cEmelee -0.2 *frame_time*20)), 0, 1)",
			"var.Rmelee": "(0.5-0.5*cos( var.cRmelee*pi ))",
			"var.Lmelee": "(0.5-0.5*cos( var.cLmelee*pi ))",
			"var.Emelee": "(0.5-0.5*cos( var.cEmelee*pi ))",
			"var.Amelee": "var.Lmelee -var.Rmelee",
			"var.Bmelee": "var.Lmelee +var.Rmelee",
			"var.Cmelee": "var.Lmelee +var.Rmelee +var.Emelee",
			"var.ylook": "(0.5-0.5*cos( clamp(sin(var.r+age/60)*6, 0, 1)*pi ))*1.2*(1-var.Cmelee)",
			"var.fold": "if(is_riding||varb.swim, 0, (0.5-0.5*cos( clamp(20 +sin(var.r +age/200)*30, 0, 1-var.Cmelee                 )*pi )) )",
			"var.pose": "if(is_riding||varb.swim, 0, (0.5-0.5*cos( clamp(1-var.fold-limb_speed*4   , 0, clamp(random(id)+0.3, 0.3, 1))*pi )) )",
			"var.nov1": "(0.5-0.5*cos( clamp(-5.6 +cos(-pi/6 +var.r   +age/80)*6 , 0, clamp(2-limb_speed*4, 0, 1-var.Cmelee))*pi ))",
			"var.nov2": "(0.5-0.5*cos( clamp(-39  +cos(-pi/4 +var.r +var.b/20)*40, 0, clamp(1-limb_speed*2, 0, 1)           )*pi ))",
			"var.yrot_offset": "if( varb.fcc, var.yrot_offset, var.yrot_offset +if( between( var.pre_roty-rot_y, -pi*2, -pi*2+0.2 ), -pi*2, between( var.pre_roty-rot_y, pi*2-0.2, pi*2 ), pi*2, 0 ) )",
			"var.roty": "rot_y +var.yrot_offset",
			"var.head_rot": "if( varb.fcc, var.head_rot, age<9, var.pre_headroty+if(is_riding,0,var.roty), (var.pre_headroty+if(is_riding,0,var.roty))*min(1,frame_time*16) +var.head_rot*max(0,1-frame_time*16) )",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"head.rx": "torad(head_pitch)/1.5 +sin(var.ls*2)/20*limb_speed +( torad(-5)*random(id) -sin(pi*2*swing_progress)/5 )*var.Bmelee +if(varb.swim, cos(var.sb*2)/30 +torad(-10) +torad(10*clamp(limb_speed*8, 0, 1)), 0) +(-torad(15 +7*random(id))*clamp(sin(limb_speed*3), 0, 1) )*var.fold +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b))/4 -torad(10) )*var.nov2 +(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.ry": "-sin(pi*swing_progress)/6*var.Amelee +torad(var.hy)/(1.8 -0.6*var.Cmelee -0.5*var.ylook) +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/6 *var.nov1",
			"head.rz": "-sin(pi*swing_progress)/6*var.Amelee                                                     +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 +cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.tx": "-sin(pi*swing_progress)  *var.Amelee +sin(torad(45)+var.ls)/3*limb_speed",
			"head.ty": " sin(pi*swing_progress)*2*var.Bmelee +if(varb.swim, -sin(var.sb*2)/2, 0.3) +14*var.cswim +limb_speed*var.ws -sin(torad(if(limb_speed>0.5, -45, 45))+var.ls*2)*limb_speed +sin(var.r +var.b)/6 +( cos(var.r+var.b +sin(var.r+var.b)*1.5)/2 +0.5 )*var.nov2",
			"head.tz": "                                      if(varb.swim, -1*clamp(limb_speed*8, 0, 1), -2.5*limb_speed -sin(var.r +var.b)/6 -cos(var.ls*2)/2*clamp(limb_speed*3, 0, 1) +(-0.2 +1.5*random(id) )*var.Bmelee -sin(pi*swing_progress)*(1 +5*var.Bmelee) +(0.5 +clamp(-1+limb_speed*2, 0, 1))*var.fold ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"nose.ty": "head.ty*var.testing",
			"body.rx": "         if(varb.swim, torad(20      *clamp(limb_speed*8, 0, 1)), sin(var.r +var.b)/60 +cos(var.ls*2)/18*limb_speed +torad(15)*limb_speed*(1-var.fold) +torad(-2.5 -2.5*var.fold)*clamp(1-limb_speed*2, 0, 1)) +torad(-10)*random(id)*var.Bmelee +sin(pi*swing_progress)*(0.1 +0.4*var.Bmelee) +( cos(var.r+var.b +sin(var.r+var.b))/12 )*var.nov2 -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"body.ry": "         if(varb.swim, sin(var.sb)/8                            , torad(-7.5)*var.pose -sin(var.ls)/4*limb_speed*clamp(1-var.fold-1+limb_speed*2, 0, 1) +torad(var.hy)/6*clamp(1-limb_speed*2, 0, 1) +(torad(-20) +sin(pi*swing_progress) )*var.Amelee -sin(pi*swing_progress)/3*(1-var.Bmelee) )",
			"body.rz": "head.rz +if(varb.swim, sin(var.sb)/30*clamp(limb_speed*8, 0, 1) , 0) +((-sin(var.ls)/60 -torad(2))*limb_speed +sin(pi*swing_progress)/9)*var.Amelee -sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"body.tx": "head.tx",
			"body.ty": "head.ty +0.15*limb_speed -cos(torad(if(limb_speed>0.5, -45, 45))+var.ls*2 +cos(var.ls*2)/2)/1.5*limb_speed",
			"body.tz": "head.tz +limb_speed +0.2*var.Bmelee",
			"nose.rx": "head.rx*var.testing",
			"nose.ry": "head.ry*var.testing",
			"nose.rz": "head.rz*var.testing",
			"nose.tx": "head.tx*var.testing",
			"nose.tz": "head.tz*var.testing"
		},
		{
			"right_arm.visible": "var.fold< 0.5 || var.win==1",
			"left_arm.visible": "   var.fold< 0.5 || var.win==1",
			"arms_rotation.visible": "var.fold>=0.5 && var.win==0",
			"right_arm.sy": "1-clamp(-0.5+var.fold*2, 0, 1)*0.15",
			"left_arm.sy": " 1-clamp(-0.5+var.fold*2, 0, 1)*0.15",
			"right_arm.rx": " clamp(-0.5+var.fold*2, 0, 1)/4 +if(varb.swim,      torad(-50) -cos(var.sb               )/4*clamp(1-limb_speed*8, 0, 1) +(cos(var.sb +sin(var.sb)) +torad(30)                                          )*clamp(limb_speed*8, 0, 1), ( torad(-100 -30*clamp(limb_speed*1.5, 0, 1) )*var.Bmelee -torad(40)*random(id) +cos(var.ls +sin(var.ls*2)/3)/4*limb_speed )*var.Rmelee    +if(is_riding, torad(-45), -sin(var.ls)*limb_speed +( torad(-20)*limb_speed )*var.Lmelee )*(1-var.Rmelee)    +torad(var.hy)/8 +torad(-50)*sin(var.fold*2) ) +sin(pi*swing_progress)*(    2.5*var.Rmelee ) +torad(-80*sin(sqrt(swing_progress)*pi*2)*sin(swing_progress*pi+sin(swing_progress/1.3)) )*(1-var.Bmelee) +torad(-10)*var.pose +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*( 1 -1.7*var.Rmelee )",
			"left_arm.rx": "  clamp(-0.5+var.fold*2, 0, 1)/4 +if(varb.swim,      torad(-50) -cos(var.sb               )/4*clamp(1-limb_speed*8, 0, 1) +(cos(var.sb +sin(var.sb)) +torad(30)                                          )*clamp(limb_speed*8, 0, 1), ( torad(-100 -30*clamp(limb_speed*1.5, 0, 1) )*var.Bmelee -torad(40)*random(id) +cos(var.ls +sin(var.ls*2)/3)/4*limb_speed )*var.Lmelee    +if(is_riding, torad(-45),  sin(var.ls)*limb_speed +( torad(-20)*limb_speed )*var.Rmelee )*(1-var.Lmelee)    -torad(var.hy)/8 +torad(-50)*sin(var.fold*2) ) +sin(pi*swing_progress)*( 1 +1.5*var.Lmelee )                                                                              +torad( 5 )*var.pose +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*( 1 -1.7*var.Lmelee )",
			"right_arm.ry": "-clamp(-0.5+var.fold*2, 0, 1)/2 +if(varb.swim,      torad( 30) -sin(var.sb +cos(var.sb)/4)  *clamp(1-limb_speed*8, 0, 1) +(torad( 5) +cos(pi/8 +var.sb +sin(var.sb)/2 )/2 +clamp(-sin(var.sb),-pi/2, 0) )*clamp(limb_speed*8, 0, 1), ( torad( 25) +clamp(torad(var.hy),-pi/4, pi/2)                                                        +sin(var.ls)/6*limb_speed )*var.Rmelee    +( (-sin(var.ls -sin(var.ls)/2)/1.5*limb_speed)/( 2 -1*var.Lmelee ) +if(is_riding, -torad(20), 0) -torad(15)*clamp(limb_speed*4, 0, 1) +cos(var.r +var.b)/30 )*(1-var.Rmelee)  ) -sin(pi/2*swing_progress*2)/2*( clamp(limb_speed*2 +1, 2, 3)*var.Rmelee -1 ) +torad(-35)*var.pose",
			"left_arm.ry": "  clamp(-0.5+var.fold*2, 0, 1)/2 +if(varb.swim,      torad(-30) +sin(var.sb +cos(var.sb)/4)  *clamp(1-limb_speed*8, 0, 1) +(torad(-5) -cos(pi/8 +var.sb +sin(var.sb)/2 )/2 +clamp( sin(var.sb), 0, pi/2) )*clamp(limb_speed*8, 0, 1), ( torad(-25) +clamp(torad(var.hy),-pi/2, pi/4)                                                        +sin(var.ls)/6*limb_speed )*var.Lmelee    +( (-sin(var.ls +sin(var.ls)/2)/1.5*limb_speed)/( 2 -1*var.Rmelee ) +if(is_riding,  torad(20), 0) +torad(15)*clamp(limb_speed*4, 0, 1) -cos(var.r +var.b)/30 )*(1-var.Lmelee)  ) +sin(pi/2*swing_progress*2)/2*( clamp(limb_speed*2 +1, 2, 3)*var.Lmelee -1 ) +torad( 20)*var.pose",
			"right_arm.rz": "-clamp(-0.5+var.fold*2, 0, 1)/2 +if(varb.swim, -cos(var.sb)/2 +(torad( 20) +cos(var.sb)/2)  *clamp(  limb_speed*8, 0, 1)    , torad(-20)*var.Rmelee    -sin(var.ls)/5*limb_speed*var.Lmelee ) -torad(head_pitch)/14 +( sin(pi*swing_progress*2)/8                      )*var.Rmelee   +( sin(pi*swing_progress)/2 +torad( 15)*random(id))*var.Lmelee +torad(-20)*clamp(var.fold*4, 0, 1) +torad( 8 +2  *var.pose)",
			"left_arm.rz": "  clamp(-0.5+var.fold*2, 0, 1)/2 +if(varb.swim,  cos(var.sb)/2 +(torad(-20) -cos(var.sb)/2)  *clamp(  limb_speed*8, 0, 1)    , torad( 20)*var.Lmelee    -sin(var.ls)/5*limb_speed*var.Rmelee ) +torad(head_pitch)/14 +(-sin(pi*swing_progress)/2 +torad(-15)*random(id) )*var.Rmelee   +(-sin(pi*swing_progress*2)/8                     )*var.Lmelee +torad( 20)*clamp(var.fold*4, 0, 1) +torad(-8 +0.5*var.pose)",
			"right_arm.tx": "body.tx -5 +if(varb.swim,  (0.5 -cos(-pi/8 +var.sb -sin(var.sb)/2 ) -clamp( sin(var.sb), 0, 1.5) )*clamp(limb_speed*8, 0, 1), (-sin(var.ls)/2*limb_speed )*torad(var.hy)*clamp(1-limb_speed*2, 0, 1) -0.5*var.Rmelee    +( 0.5 +sin(var.ls)*1.5*limb_speed )*var.Lmelee -0.3*(1-var.Bmelee) ) +sin(pi*swing_progress)*2*var.Rmelee -torad(var.hy)/2*clamp(1-limb_speed*2, 0, 1)",
			"left_arm.tx": " body.tx +5 +if(varb.swim, -(0.5 -cos(-pi/8 +var.sb -sin(var.sb)/2 ) -clamp( sin(var.sb), 0, 1.5) )*clamp(limb_speed*8, 0, 1), ( sin(var.ls)/2*limb_speed )*torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +0.5*var.Lmelee    +(-0.5 +sin(var.ls)*1.5*limb_speed )*var.Rmelee +0.3*(1-var.Bmelee) ) -sin(pi*swing_progress)*2*var.Lmelee -torad(var.hy)/2*clamp(1-limb_speed*2, 0, 1)",
			"right_arm.ty": "body.ty +2 +if(varb.swim, (1 -cos(var.sb)/2)*clamp(  limb_speed*8, 0, 1)                                                    , sin(var.r +var.b-torad(60))/7                                          +(-2 +clamp(torad(var.hy), 0, 2) )*var.Rmelee                       +if(is_riding,  1, 0) +( 0.5 )*var.pose ) +sin(pi*swing_progress)*4*var.Rmelee   +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2",
			"left_arm.ty": " body.ty +2 +if(varb.swim, (1 -cos(var.sb)/2)*clamp(  limb_speed*8, 0, 1)                                                    , sin(var.r +var.b-torad(60))/7                                          +(-2 +clamp(torad(var.hy), 0, 2) )*var.Lmelee                       +if(is_riding,  1, 0) +( 0.5 )*var.pose ) +sin(pi*swing_progress)*4*var.Lmelee   +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2",
			"right_arm.tz": "            if(varb.swim, -1 -cos(var.sb)*2 *clamp(1-limb_speed*8, 0, 1) +head.tz +(-1 +cos(-pi/8 +var.sb)*2 )*clamp(limb_speed*8, 0, 1), -2*limb_speed -sin(torad(-30)+var.ls)*( 3 -2*var.Rmelee )*limb_speed -sin(var.r +var.b)/6 +torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -1.5, 0) +(-0.75)*var.pose ) +( 2*clamp(limb_speed*1.5, 0, 1) -sin(pi*swing_progress)*8 )*var.Rmelee    +(-1                             +sin(pi*swing_progress)*3 )*var.Lmelee -sin(pi*swing_progress)*2*(1-var.Bmelee) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_arm.tz": "             if(varb.swim, -1 -cos(var.sb)*2 *clamp(1-limb_speed*8, 0, 1) +head.tz +(-1 +cos(-pi/8 +var.sb)*2 )*clamp(limb_speed*8, 0, 1), -2*limb_speed +sin(torad(-30)+var.ls)*( 3 -2*var.Lmelee )*limb_speed -sin(var.r +var.b)/6 -torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -1.5, 0) +( 0.75)*var.pose ) +(-1                             +sin(pi*swing_progress)*3 )*var.Rmelee    +( 2*clamp(limb_speed*1.5, 0, 1) -sin(pi*swing_progress)*8 )*var.Lmelee +sin(pi*swing_progress)  *(1-var.Bmelee) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
		},
		{
			"arms_rotation.ty": "1 -22.75 +sin(var.r +var.b-torad(60))/7 +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) -0.8 )*var.nov2",
			"arms_rotation.tz": "0.5",
			"arms_rotation.rx": "torad( -30*sin(var.fold*2)*2 -90*var.Bmelee +15*random(id) +(-20*var.Emelee -50*sin(sqrt(swing_progress)*pi*2)*sin(swing_progress*pi+sin(swing_progress/1.3)))*(1-var.Bmelee) ) +(-sin(torad(-45)+var.ls*2 -sin(var.ls*2)/3)/6 -torad(20))*limb_speed +( sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"arms_rotation.ry": "torad(var.hy)/6*clamp(1-limb_speed*2, 0, 1) -sin(torad(45)+var.ls)/3*limb_speed*clamp(1-var.fold-1+limb_speed*2, 0, 1)",
			"arms_rotation.rz": "torad(35*var.Amelee)"
		},
		{
			"right_leg.rx": "if(is_riding, 0, varb.swim, 0, if(is_riding, 0, torad(1)+sin(var.r +var.b)/60) +asin( sin(var.ls))/3*var.ws +sin(var.ls)/1.3*clamp(-1+limb_speed*3, 0, 1) +clamp(-cos(var.ls)/1.8*clamp(limb_speed*1.5, 0, 1), 0, torad(45)) +torad(15)*clamp(-0.5+limb_speed*2, 0, 1) -torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad( 4)*var.Amelee +torad(2)*var.fold +torad(-5  )*var.pose +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
			"left_leg.rx": " if(is_riding, 0, varb.swim, 0, if(is_riding, 0, torad(1)+sin(var.r +var.b)/60) +asin(-sin(var.ls))/3*var.ws -sin(var.ls)/1.3*clamp(-1+limb_speed*3, 0, 1) +clamp( cos(var.ls)/1.8*clamp(limb_speed*1.5, 0, 1), 0, torad(45)) +torad(15)*clamp(-0.5+limb_speed*2, 0, 1) +torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(-4)*var.Amelee +torad(2)*var.fold +torad(12.5)*var.pose +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
			"right_leg.ry": "if(is_riding, 0, varb.swim, 0,  torad( 15)*var.Rmelee              + torad( 5+12*random(id)*var.fold)*clamp(1-limb_speed*4, 0, 1)*(1-var.Bmelee)                                              )                                         +torad( 0  )*var.pose",
			"left_leg.ry": " if(is_riding, 0, varb.swim, 0,  torad(-15)*var.Lmelee              + torad(-5-12*random(id)*var.fold)*clamp(1-limb_speed*4, 0, 1)*(1-var.Bmelee)                                              )                                         +torad(-40 )*var.pose",
			"right_leg.rz": "if(is_riding, 0, varb.swim, 0, (torad( 5 ) +sin(torad(-10)+var.ls)/3*limb_speed)*var.Rmelee  + torad( 5)*clamp(1-limb_speed*2, 0, 1)*var.Lmelee -torad(var.hy)/45*clamp(1-limb_speed*2, 0, 1) )                                         +torad(2.5 )*var.pose",
			"left_leg.rz": " if(is_riding, 0, varb.swim, 0, (torad(-5 ) +sin(torad(-10)+var.ls)/3*limb_speed)*var.Lmelee  + torad(-5)*clamp(1-limb_speed*2, 0, 1)*var.Rmelee -torad(var.hy)/45*clamp(1-limb_speed*2, 0, 1) )                                         +torad(-12 )*var.pose",
			"right_leg.tx": "  -2 +if(varb.swim,         0, -2*(1-limb_speed)*var.Rmelee                                                                                        ) +(-0.75)*var.pose",
			"left_leg.tx": "    2 +if(varb.swim,         0,  2*(1-limb_speed)*var.Lmelee                                                                                        ) +( 1   )*var.pose",
			"right_leg.ty": "  24 +if(varb.swim, body.ty -14 -0.8*clamp(limb_speed*8, 0, 1) -sin(pi*swing_progress)*4, clamp( cos(var.ls)*2*var.ws +clamp(2-limb_speed*6, -3, 0) +(-sin(torad(-30)+var.ls)*3 +head.ty)*clamp(-1+limb_speed*3, 0, 1), -8, 0.2)    ) +14*var.cswim -sin(hurt_time*pi/10)*2",
			"left_leg.ty": "   24 +if(varb.swim, body.ty -14 -0.8*clamp(limb_speed*8, 0, 1) -sin(pi*swing_progress)*4, clamp(-cos(var.ls)*2*var.ws +clamp(2-limb_speed*6, -3, 0) +( sin(torad(-30)+var.ls)*3 +head.ty)*clamp(-1+limb_speed*3, 0, 1), -8, 0.2)    ) +14*var.cswim -sin(hurt_time*pi/10)*2",
			"right_leg.tz": "-0.2 +if(varb.swim, todeg(body.rx)/6 -sin(pi/4+var.sb)/1.5 -cos(pi/4+var.sb)/2*0 -sin(pi*swing_progress)*4, asin( sin(var.ls))*4*var.ws                                                     +sin(var.ls)*9 *clamp(-1+limb_speed*3, 0, 1) +limb_speed*4) +(-3.25 )*var.pose +if(is_riding, -0.5, 0)",
			"left_leg.tz": " -0.2 +if(varb.swim, todeg(body.rx)/6 +sin(pi/4+var.sb)/1.5 +cos(pi/4+var.sb)/2*0 -sin(pi*swing_progress)*4, asin(-sin(var.ls))*4*var.ws                                                     -sin(var.ls)*9 *clamp(-1+limb_speed*3, 0, 1) +limb_speed*4) +( 2.25 )*var.pose +if(is_riding, -0.5, 0)",
			"right_leg2.rx": "if(is_riding, -torad(80), varb.swim,  cos(pi/4+var.sb-sin(var.sb)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rx": " if(is_riding, -torad(80), varb.swim, -cos(pi/4+var.sb+sin(var.sb)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_leg2.ry": "if(is_riding,  torad(20), varb.swim, body.ry, 0)",
			"left_leg2.ry": " if(is_riding, -torad(20), varb.swim, body.ry, 0)",
			"right_leg2.rz": "if(is_riding,  0        , varb.swim, torad( 3), 0) -(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rz": " if(is_riding,  0        , varb.swim, torad(-3), 0) +(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
		},
		{
			"nose2.rx": "      cos(var.ls*2)/8*limb_speed +clamp(-torad(head_pitch)/3 +sin(pi*2*swing_progress)/2*var.Bmelee +( -cos(pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2, -pi/4, pi/40) +(-cos(limb_swing/2)/4 -torad(20))*2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"nose2.rz": "clamp(cos(var.ls  )/6*limb_speed -torad(var.hy)/6*clamp(2-limb_speed*4, -1.5, 0) +(var.head_rot-var.pre_headroty-if(is_riding,0,var.roty))*2, -pi/4, pi/4)/2 -head.rz/2",
			"mouth.sy": "1    -0.25*clamp(-4 -sin(var.r+age/137)*28,  min(1, var.nov1*4 +var.nov2*4 ), 1 )",
			"right_brow.tx": "-2 +0.2*var.Cmelee +( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2",
			"left_brow.tx": "  2 -0.2*var.Cmelee -( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2",
			"right_brow.ty": "-0.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 +clamp(-torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +(-1 +0.5*random(id) +sin(-var.r)/3)*var.Cmelee -sin(hurt_time*pi/10)*(1.5 +sin(limb_swing/3)) +if(limb_speed>0.5, sin(pi/4+var.ls*2)/4*limb_speed*(1+random(sin(id))), 0) -sin(pi*swing_progress)*(1-0.7*(1-var.Bmelee)) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1",
			"left_brow.ty": " -0.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 +clamp( torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +(-1 +0.5*random(id) +cos(-var.r)/3)*var.Cmelee -sin(hurt_time*pi/10)*(1.5 -sin(limb_swing/3)) +if(limb_speed>0.5, sin(     var.ls*2)/4*limb_speed*(1+random(cos(id))), 0) -sin(pi*swing_progress)*(1-0.7*(1-var.Bmelee)) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1",
			"right_brow.rz": "clamp( sin(var.r+age /110), 0, torad( 5)) +torad( 10)*var.Cmelee +( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2",
			"left_brow.rz": " clamp(-sin(var.r+age /110), torad(-5), 0) +torad(-10)*var.Cmelee -( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2"
		},
		{
			"var.blink": "pow( clamp(( 1.5 -abs(sin(var.r+age/8)*6))*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1), 0, 1), 2 )",
			"var.eye_top": "( clamp(head_pitch/60, -0.8, 0.5) +(-0.6 +0.25*random(id) +sin(-random(id))/3)*var.Cmelee -sin(pi*2*swing_progress)/2*var.Bmelee +clamp(2*var.nov1, 0, 0.3) +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) )*(1-var.blink) +var.blink",
			"var.pupil_y": "  clamp(head_pitch/80, -0.5, 0.5) +(-1 +sin(-var.r)/2)/4*var.Cmelee -sin(pi*swing_progress)/4*var.Bmelee +( -cos(var.r+var.b +sin(var.r+var.b) )/4 )*var.nov2 +clamp(2*var.nov1, 0, 0.3) -(-torad(15 +7*random(id))*clamp(sin(limb_speed*3), 0, 1) )*var.fold +(-1 -cos(limb_swing/3)/2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"var.pupil_x": "-var.hy/(80 +100*var.Cmelee +160*var.ylook) +(-sin(pi/4+var.r+age/10)*3 )*clamp(var.nov1*4, 0, 1)",
			"var.r_pupil_x": "var.pupil_x -0.3*clamp(var.nov1*4, 0, 1)",
			"var.l_pupil_x": "var.pupil_x +0.3*clamp(var.nov1*4, 0, 1)",
			"r_eye_white.sy": "clamp(1 -var.eye_top, 0, 3 )",
			"l_eye_white.sy": "r_eye_white.sy",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.r_pupil_x+1,  0, 1 )-2",
			"l_pupil.tx": "clamp( var.l_pupil_x-1, -1, 0 )+2",
			"r_pupil.ty": "clamp( var.pupil_y+1, -r_eye_white.sy+1 +min( 0.4, r_eye_white.sy ), 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+1, -l_eye_white.sy+1 +min( 0.4, l_eye_white.sy ), 1 )",
			"r_pupil.sy": "min( clamp(1 +var.pupil_y +r_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), r_eye_white.sy )",
			"l_pupil.sy": "min( clamp(1 +var.pupil_y +l_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), l_eye_white.sy )",
			"r_pupil.sx": "clamp(1 +clamp(-var.r_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.l_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0",
			"var.distance": "clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) )-3, 0, 128 )",
			"face.tz": "-4 -var.distance/500",
			"r_pupil.tz": "-var.distance/500",
			"l_pupil.tz": "-var.distance/500",
			"right_brow.tz": "-var.distance/400",
			"left_brow.tz": " -var.distance/400"
		},
		{
			"var.pre_roty": "rot_y",
			"var.pre_headroty": "head.ry",
			"var.frame_counter_prev": "frame_counter"
		}
	]
}