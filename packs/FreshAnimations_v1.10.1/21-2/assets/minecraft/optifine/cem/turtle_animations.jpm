{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.hy": "if( varb.fcc, var.hy, clamp(head_yaw,-90,90)*min(1,frame_time*2) +var.hy*max(0,1-frame_time*2) )",
			"var.child_scale": "if(is_child, 1, 0)",
			"var.testing": "0",
			"var.count_sleep": "clamp(if(!is_child && is_on_ground && !is_in_water && limb_speed<=0.03 && !is_hurt && head_pitch==0 && var.hy==0, min(20, var.count_sleep +0.001 *frame_time*20), max(0, var.count_sleep -0.01 *frame_time*20)), 0, 1)",
			"var.sleep": "clamp(var.count_sleep*40 -39, 0, 1)",
			"var.dig": "if(!is_in_water && body2.visible && leg3.ry==(cos(4 *limb_swing *5 +pi) *8 *limb_speed *2), 1-var.testing, 0)",
			"var.r": "random(id)*pi*4",
			"var.b": "var.r+age/if(is_child, 5, 25)",
			"var.swim": "var.r+age/if(is_child, 7, 15)",
			"var.up": "var.up +abs( var.pre_posy-pos_y )",
			"var.ls": "limb_swing*if(is_child, 1.5, 1.3)*(1-var.dig) +if(is_in_water, var.up*2, 0)",
			"var.ds": "limb_swing*var.dig*(13-12*var.testing)",
			"var.m": "clamp( limb_speed*if( is_child, 1.2, 1 ) +abs( var.position-pos_y ), 0, 1 )",
			"var.yrot_offset": "if( varb.fcc, var.yrot_offset, var.yrot_offset +if( between( var.pre_roty-rot_y, -pi*2, -pi*2+0.2 ), -pi*2, between( var.pre_roty-rot_y, pi*2-0.2, pi*2 ), pi*2, 0 ) )",
			"var.roty": "rot_y +var.yrot_offset",
			"var.rotation": "if( varb.fcc, var.rotation, age<9 || is_riding, var.roty, var.roty*min(1,frame_time*2) +var.rotation*max(0,1-frame_time*2) )",
			"var.position": "if( varb.fcc, var.position, age<9 || is_riding,    pos_y,    pos_y*min(1,frame_time*5) +var.position*max(0,1-frame_time*5) )",
			"var.speed": "if( varb.fcc, var.speed, age<9, 0, limb_speed*min(1,frame_time*6) +var.speed*max(0,1-frame_time*6) )",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"root.ry": "var.rotation-rot_y",
			"root.sy": "if(is_child, 1 +0.75/2, 1)",
			"root.sx": "if(is_child, 1 +0.75/2, 1)",
			"root.sz": "if(is_child, 1 +0.75/2, 1)",
			"body_rotation.rx": "if(is_in_water, sin(var.swim)/20 +sin(var.ls/3)/10, clamp(-2*var.speed +torad(head_pitch)/5, torad(-5), 0)*(1-var.dig) +sin(var.b)/60*if(is_child, 1, clamp(-head_pitch/30, -1, 1)))",
			"body_rotation.ry": "if(is_in_water, 0, ( cos(var.ls)/20 )*(1-var.dig) +cos( pi/4+var.ds)/7 *var.dig  )",
			"body_rotation.rz": "if(is_in_water, 0, (-sin(var.ls)/10 )*(1-var.dig) +cos(-pi/4+var.ds)/14*var.dig  )",
			"body_rotation.ty": "if(is_in_water,-2, (-sin(torad(45)+var.ls*2)*1.4 ) )",
			"body_rotation.tz": "if(is_in_water, cos(var.swim)/2 +cos(var.ls/3)*if(is_child, 1.5, 1), clamp(30*var.speed -(head_pitch/30), 0, 1) +if(body2.visible, -1, 0) ) -15",
			"fins.rx": "if(is_in_water, body_rotation.rx, 0) -pi/2",
			"fins.ry": "if(is_in_water, body_rotation.ry, 0)",
			"fins.rz": "if(is_in_water, body_rotation.rz, 0)",
			"fins.tx": "if(is_in_water, body_rotation.tx, 0)",
			"fins.ty": "if(is_in_water, body_rotation.ty +7 *var.testing, 0 ) +1",
			"fins.tz": "if(is_in_water, body_rotation.tz -11*var.testing, -14.5 +if(body2.visible, -1, 0) )",
			"head2.rx": "torad(-90) +if(is_in_water, sin(torad(90)+var.swim)/30 +cos(var.ls/3)/8, if(is_child, torad(-10), 0) +sin(var.b)/30) +clamp(torad(head_pitch), torad(-60), torad(60))",
			"head2.ry": "clamp( torad(var.hy)/6 +clamp(torad(20)*clamp(head_pitch/40, -1, 1) +torad(90)*(var.hy/40), torad(-20), torad(20)), torad(-45), torad(45)) +if(is_in_water, -body_rotation.ry, sin(var.ls)/10*(1-var.dig) +(-cos( pi/4+var.ds)/7 )*var.dig )",
			"head2.rz": "clamp(-torad(var.hy)/2 +clamp(torad(45)*clamp(head_pitch/40, -1, 1) +torad(90)*(var.hy/40), torad(-45), torad(45)), torad(-45), torad(45)) +if(is_in_water, 0, sin(var.ls)/10*(1-var.dig) +( -cos(-pi/4+var.ds)/14 )*var.dig )",
			"head2.tz": "if(is_child, 3, 0) +if(is_in_water, 0, clamp(-1+var.speed*20 -(head_pitch/30), -1, 0)) +if(is_in_water, 0, -cos(var.b)/6)",
			"head2.sx": "if(is_child, 2, 1)",
			"head2.sy": "head2.sx",
			"head2.sz": "head2.sx",
			"belly.rx": "body_rotation.rx",
			"belly.ry": "body_rotation.ry",
			"belly.rz": "body_rotation.rz",
			"belly.tx": "body_rotation.tx",
			"belly.ty": "body_rotation.ty +7 *var.testing",
			"belly.tz": "body_rotation.tz -11*var.testing",
			"body.rx": "clamp( var.position-pos_y, -1, 1 ) +torad(90)",
			"body.rz": "if(is_in_water, clamp( (var.rotation-var.roty), -1, 1 )/1.5*clamp( 1-abs( var.position-pos_y ), 0, 1 )*min(1,0.2+limb_speed), 0 )",
			"body.ty": "( 17 +if(is_child, -1, 0) ) * (1-0.5*var.child_scale) +if(is_child, 14.6 -6.5, 0)*var.child_scale",
			"body.tz": " -1 * (1-0.5*var.child_scale)",
			"body2.rx": "body.rx",
			"body2.rz": "body.rz",
			"body2.ty": "body.ty",
			"body2.tz": "body.tz"
		},
		{
			"right_front_fin.rx": "if(is_in_water, torad(20)*clamp(1-var.m*2,0,1) -sin(torad(90)+var.ls/3)/if(is_child, 1, 2)*var.m, ( torad(20) +sin(torad(-45)+var.ls)/3 )*(1-var.dig)  +( sin(torad(-20)+var.ds)/3 )*var.dig )",
			"left_front_fin.rx": " if(is_in_water, torad(20)*clamp(1-var.m*2,0,1) -sin(torad(90)+var.ls/3)/if(is_child, 1, 2)*var.m, ( torad(20) -sin(torad(-45)+var.ls)/3 )*(1-var.dig)  +(-sin(torad(-20)+var.ds)/3 )*var.dig )",
			"right_front_fin.rz": "if(is_in_water,  sin(var.swim)/8 +torad(-30)*clamp(1-var.m*2,0,1) +clamp( sin(var.ls/3)*2.5/if(is_child, 1, 2)*var.m, torad(-80), torad(60)) +body_rotation.ry, clamp( cos(var.ls)/if(is_child, 1, 4)*clamp(var.speed*10, 0, 1)*(1-var.dig) +sin(var.ds)/1.5*clamp(var.speed*20, 0, 1)*var.dig, 0, torad( 45))) -torad(5)*var.dig +clamp( torad(head_pitch)/7, torad(-8), 0)",
			"left_front_fin.rz": " if(is_in_water, -sin(var.swim)/8 +torad( 30)*clamp(1-var.m*2,0,1) +clamp(-sin(var.ls/3)*2.5/if(is_child, 1, 2)*var.m, torad(-60), torad(80)) +body_rotation.ry, clamp( cos(var.ls)/if(is_child, 1, 4)*clamp(var.speed*10, 0, 1)*(1-var.dig) +sin(var.ds)/1.5*clamp(var.speed*20, 0, 1)*var.dig, torad(-45), 0)) +torad(5)*var.dig +clamp(-torad(head_pitch)/7, 0, torad( 8))",
			"right_front_fin.ry": "-if(is_in_water, torad(-20) -clamp(var.hy/90, torad(-30), torad(30)), ( torad(-30) +sin(var.ls)/1.5 )*(1-var.dig)  +( torad(-45) +cos(var.ds)/1.5 )*var.dig )",
			"left_front_fin.ry": " -if(is_in_water, torad( 20) -clamp(var.hy/90, torad(-30), torad(30)), ( torad( 30) +sin(var.ls)/1.5 )*(1-var.dig)  +( torad( 45) +cos(var.ds)/1.5 )*var.dig )",
			"right_front_fin.tz": " 2 +if(is_in_water, -4, -sin(var.ls)*(1-var.dig)  +cos(var.ds)*var.dig  -8) +body_rotation.ty +7*var.testing",
			"left_front_fin.tz": "  2 +if(is_in_water, -4,  sin(var.ls)*(1-var.dig)  -cos(var.ds)*var.dig  -8) +body_rotation.ty +7*var.testing",
			"right_front_fin.ty": "1.5 -if(is_in_water, if(is_child, 0, -1) +sin(torad(90)+var.swim)/2, -0.5 +( clamp( cos(var.ls)/2*clamp(var.speed*30, 0, 3)*(1-var.dig) +cos(var.ds)*var.dig, 0, 3) -0.7*var.dig +sin(torad(-45)+var.ls)*(1-var.dig) )  +clamp(-(head_pitch/40), 0, 1) )",
			"left_front_fin.ty": " 1.5 -if(is_in_water, if(is_child, 0, -1) +sin(torad(90)+var.swim)/2, -0.5 +( clamp(-cos(var.ls)/2*clamp(var.speed*30, 0, 3)*(1-var.dig) -cos(var.ds)*var.dig, 0, 3) -0.7*var.dig -sin(torad(-45)+var.ls)*(1-var.dig) )  +clamp(-(head_pitch/40), 0, 1) )",
			"right_front_fin.sx": "if(is_child, 1.5, 1)",
			"right_front_fin.sy": "right_front_fin.sx",
			"right_front_fin.sz": "right_front_fin.sx",
			"left_front_fin.sx": "if(is_child, 1.5, 1)",
			"left_front_fin.sy": "left_front_fin.sx",
			"left_front_fin.sz": "left_front_fin.sx"
		},
		{
			"right_back_fin.rx": "            if(is_in_water, sin(torad(-90)+var.swim)/10 -cos(var.ls/3)/6 +clamp(torad(-20)+var.m, torad(-20), 0), clamp(-cos(var.ls)/3*clamp(var.speed*10, 0, 1)*(1-var.dig) , 0, torad( 45)) +clamp(torad(-10)+var.speed*10, torad(-10), 0) )",
			"left_back_fin.rx": "             if(is_in_water, sin(torad(-90)+var.swim)/10 -cos(var.ls/3)/6 +clamp(torad(-20)+var.m, torad(-20), 0), clamp( cos(var.ls)/3*clamp(var.speed*10, 0, 1)*(1-var.dig) , 0, torad( 45)) +clamp(torad(-10)+var.speed*10, torad(-10), 0) )",
			"right_back_fin.rz": "torad(-10) +if(is_in_water, if(is_child, torad( 10), torad(-20)) +body_rotation.ry, ( sin(var.ds)/3 +torad(15) )*clamp(var.speed*20, 0, 1)*var.dig )",
			"left_back_fin.rz": " torad( 10) +if(is_in_water, if(is_child, torad(-10), torad( 20)) +body_rotation.ry, ( sin(var.ds)/3 -torad(15) )*clamp(var.speed*20, 0, 1)*var.dig )",
			"right_back_fin.ry": "torad(-15) -if(is_in_water, clamp(torad(-20)*var.m*3, torad(-20), 0)*if(is_child, 0.5, 1), sin(var.ls)/5*(1-var.dig) +( -cos(var.ds)/1.7 +torad(15) )*var.dig )",
			"left_back_fin.ry": " torad( 15) -if(is_in_water, clamp(torad( 20)*var.m*3, 0, torad( 20))*if(is_child, 0.5, 1), sin(var.ls)/5*(1-var.dig) +( -cos(var.ds)/1.7 -torad(15) )*var.dig )",
			"right_back_fin.tx": "-4 +if(is_in_water, 0, sin(var.ls)*(1-var.dig)  +clamp(-1*var.speed*10, -1, 0))",
			"left_back_fin.tx": "  4 +if(is_in_water, 0, sin(var.ls)*(1-var.dig)  +clamp( 1*var.speed*10,  0, 1))",
			"right_back_fin.tz": "8 +if(is_in_water, if(is_child, 0, 2),  sin(torad(45)+var.ls)*3*clamp(var.speed*10, 0, 1)*(1-var.dig)  +body_rotation.ty +7*var.testing)",
			"left_back_fin.tz": " 8 +if(is_in_water, if(is_child, 0, 2), -sin(torad(45)+var.ls)*3*clamp(var.speed*10, 0, 1)*(1-var.dig)  +body_rotation.ty +7*var.testing)",
			"right_back_fin.ty": "2 -if(is_in_water, -0.5, -2*clamp(var.speed*10, 0, 1))",
			"left_back_fin.ty": " 2 -if(is_in_water, -0.5, -2*clamp(var.speed*10, 0, 1))",
			"right_back_fin.sx": "if(is_child, 1.5, 1)",
			"right_back_fin.sy": "right_back_fin.sx",
			"right_back_fin.sz": "right_back_fin.sx",
			"left_back_fin.sx": "if(is_child, 1.5, 1)",
			"left_back_fin.sy": "left_back_fin.sx",
			"left_back_fin.sz": "left_back_fin.sx"
		},
		{
			"var.blink": "pow( clamp((1.5 -abs(sin(var.r+age/if(is_child, 6, 9))*5 ))*clamp(-32 +cos((var.r+age/if(is_child, 6, 9))/1.5)*40 +cos((var.r+age/if(is_child, 6, 9))/4)*40, 0, 1), var.sleep, 1), 2 )",
			"var.eye_top": "( clamp(head_pitch/120, -0.2, 0.4) +(-1.5 -cos(limb_swing/3)/2)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) )*(1-var.blink) +var.blink",
			"var.pupil_y": "0.5 +clamp(head_pitch/120, -0.2, 0.5) +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -clamp(-24 +sin(var.r+age/100)*40, 0, 1)/10",
			"var.pupil_x": "-torad(var.hy)/1.2 +clamp(sin(var.r+age/27) +sin(var.r+age/16), -0.1, 0.1)*clamp(-20*2 -cos(var.r+age/125)*30*2, 0, 1)*clamp(59*4 -sin(var.r+age/187)*60*4, 0, 1)",
			"right_eye.tx": "-3 -clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) ), 0, 128 )/700",
			"left_eye.tx": "-right_eye.tx",
			"r_pupil.tz": "right_eye.tx+3",
			"l_pupil.tz": "right_eye.tx+3",
			"r_eye_white.sy": "clamp(1 -var.eye_top, 0, 2 )",
			"l_eye_white.sy": "r_eye_white.sy",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.pupil_x+1,  0, 1 )",
			"l_pupil.tx": "clamp( var.pupil_x-1, -1, 0 )",
			"r_pupil.ty": "clamp( var.pupil_y+0.5, -r_eye_white.sy+0.6, 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+0.5, -l_eye_white.sy+0.6, 1 )",
			"r_pupil.sy": "clamp(1 +var.pupil_y-0.5 +r_eye_white.sy-1, 0, clamp( r_eye_white.sy, 0, clamp(-var.pupil_y+1.5, 0.5, 1) ) )",
			"l_pupil.sy": "clamp(1 +var.pupil_y-0.5 +l_eye_white.sy-1, 0, clamp( l_eye_white.sy, 0, clamp(-var.pupil_y+1.5, 0.5, 1) ) )",
			"r_pupil.sx": "clamp(1 +clamp(-var.pupil_x, -0.3, 0 ), 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.pupil_x, -0.3, 0 ), 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0"
		},
		{
			"var.pre_posy": "pos_y",
			"var.pre_roty": "rot_y",
			"var.frame_counter_prev": "frame_counter"
		}
	]
}