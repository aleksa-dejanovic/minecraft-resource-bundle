{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.hy": "clamp(head_yaw,-90,90)",
			"var.testing": "0",
			"var.right_arm_rx": "if( varb.fcc, var.right_arm_rx, right_arm.rx )",
			"var.left_arm_rx": " if( varb.fcc,  var.left_arm_rx,  left_arm.rx )",
			"var.right_arm_ry": "if( varb.fcc, var.right_arm_ry, right_arm.ry )",
			"var.left_arm_ry": " if( varb.fcc,  var.left_arm_ry,  left_arm.ry )",
			"var.right_arm_rz": "if( varb.fcc, var.right_arm_rz, right_arm.rz )",
			"var.left_arm_rz": " if( varb.fcc,  var.left_arm_rz,  left_arm.rz )",
			"var.count_swim": " clamp(if(!is_riding&&!is_on_ground&&is_in_water, min(40, var.count_swim  +0.1 *frame_time*40), max(0, var.count_swim  -0.1 *frame_time*40)), 0, 1)",
			"var.r": "pi*random(id)*4",
			"var.b": "age /(11 -random(id)*2)",
			"var.ls": "limb_swing/if( limb_speed>0.5, 1.6, 1.1 )",
			"var.swim": "limb_swing/2 +age/4",
			"var.walk": "clamp(limb_speed*6, 0, 1)*clamp(2-limb_speed*3, 0, 1)",
			"var.ylook": "(0.5-0.5*cos( clamp(sin(var.r+age/60)*6, 0, 1)*pi ))*1.2",
			"var.crossbow": "if(equals(var.left_arm_ry -torad(40), var.right_arm_ry +torad(40), torad(30)), 1, 0)",
			"var.pose": "if(is_riding||is_in_water&&!is_on_ground, 0, clamp(1-limb_speed*4, 0, 1))*clamp(random(id)+0.3, 0.3, 1)",
			"var.nov1": "if(var.crossbow==1, 0, (0.5-0.5*cos( clamp(-5.6 +cos(-pi/6 +var.r   +age/80)*6 , 0, 1)*pi ))*clamp(2-limb_speed*4, 0, 1) )",
			"var.nov2": "                       (0.5-0.5*cos( clamp(-39  +cos(-pi/4 +var.r +var.b/20)*40, 0, 1)*pi ))*clamp(1-limb_speed*2, 0, 1)",
			"var.nov3": "if(var.crossbow==1,    (0.5-0.5*cos( clamp(-2   +cos(-pi/4 +var.r +var.b/10)*6 , 0, 1)*pi ))*clamp(2-limb_speed*3, 0, 1), 0)",
			"var.yrot_offset": "if( varb.fcc, var.yrot_offset, var.yrot_offset +if( between( var.pre_roty-rot_y, -pi*2, -pi*2+0.2 ), -pi*2, between( var.pre_roty-rot_y, pi*2-0.2, pi*2 ), pi*2, 0 ) )",
			"var.roty": "rot_y +var.yrot_offset",
			"var.head_rot": "if( varb.fcc, var.head_rot, age<9, var.pre_headroty+if(is_riding,0,var.roty), (var.pre_headroty+if(is_riding,0,var.roty))*min(1,frame_time*16) +var.head_rot*max(0,1-frame_time*16) )",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"head.rx": "torad(head_pitch)/1.5 +sin(var.ls*2)/20*limb_speed +if(!is_riding&&!is_on_ground&&is_in_water, cos(var.swim*2)/30 +torad(-10) +torad(10*clamp(limb_speed*8, 0, 1)), 0) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b))/4 -torad(10) )*var.nov2 +(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.ry": "torad(var.hy)/(1.8 -0.5*var.ylook)  +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/6 *var.nov1 +torad(10)*-cos(var.nov3*pi)*var.nov3",
			"head.rz": "-torad(20)*-cos(var.nov3*pi)*var.nov3 +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 +cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.tx": "sin(torad(45)+var.ls)/3*limb_speed",
			"head.ty": "if(!is_riding&&!is_on_ground&&is_in_water, -sin(var.swim*2)/2          , 0.3) +14*var.count_swim +limb_speed*var.walk -sin(torad(if(limb_speed>0.5, -45, 45))+var.ls*2)*limb_speed +sin(var.r +var.b)/6 +( cos(var.r+var.b +sin(var.r+var.b)*1.5)/2 +0.5 )*var.nov2 +0.5*-cos(var.nov3*pi)*var.nov3",
			"head.tz": "if(!is_riding&&!is_on_ground&&is_in_water, -1*clamp(limb_speed*8, 0, 1), (-2.5*limb_speed) -sin(var.r +var.b)/6 -cos(var.ls*2)/2*clamp(limb_speed*3, 0, 1) ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"nose.ty": "head.ty*var.testing",
			"body.rx": "         if(!is_riding&&!is_on_ground&&is_in_water, torad(20          *clamp(limb_speed*8, 0, 1)), sin(var.r +var.b)/60 +cos(var.ls*2)/18*limb_speed +torad(-2.5)*clamp(1-limb_speed*2, 0, 1) +torad(15)*limb_speed ) +( cos(var.r+var.b +sin(var.r+var.b))/12 )*var.nov2 -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"body.ry": "         if(!is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/8                            , torad(-7.5*(1+var.crossbow))*var.pose -sin(var.ls)/4*clamp(-1+limb_speed*2, 0, 1) -sin(var.ls)/4*clamp(limb_speed*2, 0, 1)*(1-(0.5*var.crossbow)) ) +torad(var.hy)/6*clamp(1-limb_speed*2, 0, 1)",
			"body.rz": "head.rz +if(!is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/30*clamp(limb_speed*8, 0, 1) , 0) -sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +torad(20)*-cos(var.nov3*pi)*var.nov3",
			"body.tx": "head.tx",
			"body.ty": "head.ty -cos(torad(if(limb_speed>0.5, -45, 45))+var.ls*2 +cos(var.ls*2)/2)/1.5*limb_speed -0.5*-cos(var.nov3*pi)*var.nov3",
			"body.tz": "head.tz +(0.25*limb_speed)",
			"nose.rx": "head.rx*var.testing",
			"nose.ry": "head.ry*var.testing",
			"nose.rz": "head.rz*var.testing",
			"nose.tx": "head.tx*var.testing",
			"nose.tz": "head.tz*var.testing"
		},
		{
			"right_arm.rx": "if(var.crossbow==1, var.right_arm_rx*(1-var.testing) -torad(90)*var.testing -sin(var.r +var.b)/40 +sin(var.ls*2)/10*limb_speed                                                                                  +torad(-7 +(-head_pitch +50)*clamp(limb_speed*1.5, 0, 1)*(1-var.nov3)) -torad(2)*-cos(var.nov3*pi)*var.nov3, if(!is_riding&&!is_on_ground&&is_in_water,      torad(-50) -cos(var.swim                 )/4*clamp(1-limb_speed*8, 0, 1) +(cos(var.swim +sin(var.swim)) +torad(30)                                            )*clamp(limb_speed*8, 0, 1), if(is_riding, torad(-45), -sin(var.ls)*limb_speed ) +torad(var.hy)/8 )   +torad(-10)*var.pose +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2  ) +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*if(var.crossbow==1, -0.7, 1)",
			"left_arm.rx": " if(var.crossbow==1,  var.left_arm_rx*(1-var.testing) -torad(90)*var.testing -sin(var.r +var.b)/40 +sin(var.ls*2)/10*limb_speed +clamp(-torad(head_pitch)/4, 0, pi/2)*clamp(1-limb_speed*1.5, 0, 1)*(1-var.nov3) +torad(    (-head_pitch +35)*clamp(limb_speed*1.5, 0, 1)*(1-var.nov3)) -torad(5)*-cos(var.nov3*pi)*var.nov3, if(!is_riding&&!is_on_ground&&is_in_water,      torad(-50) -cos(var.swim                 )/4*clamp(1-limb_speed*8, 0, 1) +(cos(var.swim +sin(var.swim)) +torad(30)                                            )*clamp(limb_speed*8, 0, 1), if(is_riding, torad(-45),  sin(var.ls)*limb_speed ) -torad(var.hy)/8 )   +torad( 5 )*var.pose +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2  ) +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*if(var.crossbow==1, -0.7, 1)",
			"right_arm.ry": "if(var.crossbow==1, var.right_arm_ry*(1-var.testing) -torad(15)*var.testing -sin(var.ls)/3*limb_speed*(1-var.nov3) -torad(25*clamp(-1+limb_speed*3, 0, 1)*(1-var.nov3))                                                                                +torad(-var.hy*clamp(limb_speed*1.5, 0, 1)) +clamp(torad(head_pitch)/8,-pi/4, 0), if(!is_riding&&!is_on_ground&&is_in_water,      torad( 30) -sin(var.swim +cos(var.swim)/4)  *clamp(1-limb_speed*8, 0, 1) +(torad( 5) +cos(pi/8 +var.swim +sin(var.swim)/2 )/2 +clamp(-sin(var.swim),-pi/2, 0) )*clamp(limb_speed*8, 0, 1), if(is_riding, -torad(20), 0) -torad(15)*clamp(limb_speed*4, 0, 1) +cos(var.r +var.b)/30 ) +torad(-35)*var.pose  )",
			"left_arm.ry": " if(var.crossbow==1,  var.left_arm_ry*(1-var.testing) +torad(40)*var.testing -sin(var.ls)/3*limb_speed*(1-var.nov3) -torad(10*clamp(-1+limb_speed*3, 0, 1)*(1-var.nov3)) +clamp(-torad(var.hy)/3,-pi/2, 0)*clamp(1-limb_speed*1.5, 0, 1)*(1-var.nov3) +torad(-var.hy*clamp(limb_speed*1.5, 0, 1)) +clamp(torad(head_pitch)/8,-pi/4, 0), if(!is_riding&&!is_on_ground&&is_in_water,      torad(-30) +sin(var.swim +cos(var.swim)/4)  *clamp(1-limb_speed*8, 0, 1) +(torad(-5) -cos(pi/8 +var.swim +sin(var.swim)/2 )/2 +clamp( sin(var.swim), 0, pi/2) )*clamp(limb_speed*8, 0, 1), if(is_riding,  torad(20), 0) +torad(15)*clamp(limb_speed*4, 0, 1) -cos(var.r +var.b)/30 ) +torad( 20)*var.pose  )",
			"right_arm.rz": "if(var.crossbow==1, var.right_arm_rz*(1-var.testing) -clamp(torad(head_pitch)/8,-pi/4, pi/4) +torad(5)*-cos(var.nov3*pi)*var.nov3, if(!is_riding&&!is_on_ground&&is_in_water, -cos(var.swim)/2 +(torad( 20) +cos(var.swim)/2)  *clamp(  limb_speed*8, 0, 1)                                          , 0 ) -torad(head_pitch)/14 +torad( 8 +2  *var.pose)  )",
			"left_arm.rz": " if(var.crossbow==1,  var.left_arm_rz*(1-var.testing) +clamp(torad(head_pitch)/8,-pi/4, pi/4)                                     , if(!is_riding&&!is_on_ground&&is_in_water,  cos(var.swim)/2 +(torad(-20) -cos(var.swim)/2)  *clamp(  limb_speed*8, 0, 1)                                          , 0 ) +torad(head_pitch)/14 +torad(-8 +0.5*var.pose)  )",
			"right_arm.tx": "body.tx -5 -0.2*var.pose +if(var.crossbow==1, sin(-pi/3+var.ls)*limb_speed +1   +clamp(-var.hy/20,  0, 3.5), if(!is_riding&&!is_on_ground&&is_in_water,  (0.5 -cos(-pi/8 +var.swim -sin(var.swim)/2 ) -clamp( sin(var.swim), 0, 1.5)              )*clamp(limb_speed*8, 0, 1), (-sin(var.ls)/2*limb_speed )*torad(var.hy)*clamp(1-limb_speed*2, 0, 1) -0.3 )  )",
			"left_arm.tx": " body.tx +5 +0.2*var.pose +if(var.crossbow==1, sin(-pi/3+var.ls)*limb_speed -0.8 +clamp(-var.hy/20, -3, 0  ), if(!is_riding&&!is_on_ground&&is_in_water, -(0.5 -cos(-pi/8 +var.swim -sin(var.swim)/2 ) -clamp( sin(var.swim), 0, 1.5)              )*clamp(limb_speed*8, 0, 1), ( sin(var.ls)/2*limb_speed )*torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +0.3 )  )",
			"right_arm.ty": "body.ty +2 +if(var.crossbow==1, 0.5*clamp(limb_speed*1.5, 0, 1)  *(1-var.nov3) +cos(var.ls*2)/3*limb_speed -0.3*-cos(var.nov3*pi)*var.nov3, 0) +if(!is_riding&&!is_on_ground&&is_in_water, (1 -cos(var.swim)/2)*clamp(  limb_speed*8, 0, 1)                                                                     , sin(var.r +var.b-torad(60))/7                                                                              +if(is_riding, 1, 0) +(0.5)*var.pose ) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2",
			"left_arm.ty": " body.ty +2 +if(var.crossbow==1, 0.5*clamp(limb_speed*1.5, 0, 1)  *(1-var.nov3) +cos(var.ls*2)/3*limb_speed                                , 0) +if(!is_riding&&!is_on_ground&&is_in_water, (1 -cos(var.swim)/2)*clamp(  limb_speed*8, 0, 1)                                                                     , sin(var.r +var.b-torad(60))/7                                                                              +if(is_riding, 1, 0) +(0.5)*var.pose ) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2",
			"right_arm.tz": "            if(var.crossbow==1, -2 +clamp(limb_speed*1.5, 0, 1)  *(1-var.nov3) +clamp( var.hy/30, -2, 2) -sin(torad(-30)+var.ls)*limb_speed, if(!is_riding&&!is_on_ground&&is_in_water, -1 -cos(var.swim)*2 *clamp(1-limb_speed*8, 0, 1) +head.tz +(-1 +cos(-pi/8 +var.swim)*2 )*clamp(limb_speed*8, 0, 1), (-2*limb_speed) -sin(torad(-30)+var.ls)*3*limb_speed -sin(var.r +var.b)/6 +torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -2, 0) ) ) +(-0.75*(1+var.crossbow))*var.pose +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_arm.tz": "             if(var.crossbow==1, -2 -clamp(limb_speed*1.5, 0, 1)*2*(1-var.nov3) +clamp(-var.hy/30, -3, 4) +sin(torad(-30)+var.ls)*limb_speed, if(!is_riding&&!is_on_ground&&is_in_water, -1 -cos(var.swim)*2 *clamp(1-limb_speed*8, 0, 1) +head.tz +(-1 +cos(-pi/8 +var.swim)*2 )*clamp(limb_speed*8, 0, 1), (-2*limb_speed) +sin(torad(-30)+var.ls)*3*limb_speed -sin(var.r +var.b)/6 -torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -2, 0) ) ) +( 0.75*(1+var.crossbow))*var.pose +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
		},
		{
			"right_leg.rx": "if(!is_riding&&!is_on_ground&&is_in_water, 0, if(!is_riding, torad(1)+sin(var.r +var.b)/60, 0) +asin( sin(var.ls))/3*var.walk +sin(var.ls)/1.3*clamp(-1+limb_speed*3, 0, 1) +clamp(-cos(var.ls)/1.8*clamp(limb_speed*1.5, 0, 1), 0, torad(45)) +torad(15)*clamp(-0.5+limb_speed*2, 0, 1) -torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(-5  )*var.pose +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
			"left_leg.rx": " if(!is_riding&&!is_on_ground&&is_in_water, 0, if(!is_riding, torad(1)+sin(var.r +var.b)/60, 0) +asin(-sin(var.ls))/3*var.walk -sin(var.ls)/1.3*clamp(-1+limb_speed*3, 0, 1) +clamp( cos(var.ls)/1.8*clamp(limb_speed*1.5, 0, 1), 0, torad(45)) +torad(15)*clamp(-0.5+limb_speed*2, 0, 1) +torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(12.5)*var.pose +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
			"right_leg.ry": "torad( 0  )*var.pose",
			"left_leg.ry": " torad(-40 )*var.pose",
			"right_leg.rz": "torad(2.5 )*var.pose +if(!is_riding&&!is_on_ground&&is_in_water, 0, -torad(var.hy)/45*clamp(1-limb_speed*2, 0, 1)  )",
			"left_leg.rz": " torad(-12 )*var.pose +if(!is_riding&&!is_on_ground&&is_in_water, 0, -torad(var.hy)/45*clamp(1-limb_speed*2, 0, 1)  )",
			"right_leg.tx": "-2 +(-0.75)*var.pose +if(is_riding, -0.5, 0)",
			"left_leg.tx": "  2 +( 1   )*var.pose +if(is_riding,  0.5, 0)",
			"right_leg.ty": "  24 +if(!is_riding&&!is_on_ground&&is_in_water, body.ty -14 -0.8*clamp(limb_speed*8, 0, 1), clamp( cos(var.ls)*2*var.walk +clamp(2-limb_speed*6, -3, 0) +(-sin(torad(-30)+var.ls)*3 +head.ty)*clamp(-1+limb_speed*3, 0, 1), -8, 0.2)    ) +14*var.count_swim -sin(hurt_time*pi/10)*2",
			"left_leg.ty": "   24 +if(!is_riding&&!is_on_ground&&is_in_water, body.ty -14 -0.8*clamp(limb_speed*8, 0, 1), clamp(-cos(var.ls)*2*var.walk +clamp(2-limb_speed*6, -3, 0) +( sin(torad(-30)+var.ls)*3 +head.ty)*clamp(-1+limb_speed*3, 0, 1), -8, 0.2)    ) +14*var.count_swim -sin(hurt_time*pi/10)*2",
			"right_leg.tz": "-0.2 +if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 -sin(pi/4+var.swim)/1.5 -cos(pi/4+var.swim)/2*0, asin( sin(var.ls))*4*var.walk                                                     +sin(var.ls)*9 *clamp(-1+limb_speed*3, 0, 1) +limb_speed*4) +(-3.25 )*var.pose +if(is_riding, -0.5, 0)",
			"left_leg.tz": " -0.2 +if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 +sin(pi/4+var.swim)/1.5 +cos(pi/4+var.swim)/2*0, asin(-sin(var.ls))*4*var.walk                                                     -sin(var.ls)*9 *clamp(-1+limb_speed*3, 0, 1) +limb_speed*4) +( 2.25 )*var.pose +if(is_riding, -0.5, 0)",
			"right_leg2.rx": "if(is_riding, -torad(85), !is_riding&&!is_on_ground&&is_in_water,  cos(pi/4+var.swim-sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rx": " if(is_riding, -torad(85), !is_riding&&!is_on_ground&&is_in_water, -cos(pi/4+var.swim+sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_leg2.ry": "if(is_riding,  torad(20), !is_riding&&!is_on_ground&&is_in_water, body.ry, 0)",
			"left_leg2.ry": " if(is_riding, -torad(20), !is_riding&&!is_on_ground&&is_in_water, body.ry, 0)",
			"right_leg2.rz": "if(is_riding,  0        , !is_riding&&!is_on_ground&&is_in_water, torad( 3), 0) -(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rz": " if(is_riding,  0        , !is_riding&&!is_on_ground&&is_in_water, torad(-3), 0) +(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
		},
		{
			"nose2.rx": "      cos(var.ls*2)/8*limb_speed +clamp(-torad(head_pitch)/3 +( -cos(pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2, -pi/4, pi/40) +(-cos(limb_swing/2)/4 -torad(20))*2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"nose2.rz": "clamp(cos(var.ls  )/6*limb_speed -torad(var.hy)/6*clamp(2-limb_speed*4, -1.5, 0) +(var.head_rot-var.pre_headroty-if(is_riding,0,var.roty))*2, -pi/4, pi/4)/2 -head.rz/2",
			"mouth.sy": "1    -0.25*clamp(-4 -sin(var.r+age/137)*28,  min(1, var.nov1*4 +var.nov2*4 ), 1 )",
			"right_brow.tx": "-2 +( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2 +0.1*var.nov3",
			"left_brow.tx": "-right_brow.tx",
			"var.brows_y": "-0.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 -sin(hurt_time*pi/10)*(1.5 +sin(limb_swing/3)) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1",
			"right_brow.ty": "var.brows_y +clamp(-torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +(-1 +sin(-var.r)/3)/4*clamp(-4 +sin(var.r +age/97)*8, 0, 1)*random(id) +if(limb_speed>0.5, sin(pi/4+var.ls*2)/8*limb_speed*(1+random(sin(id))), 0) -0.2*var.nov3",
			"left_brow.ty": " var.brows_y +clamp( torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +(-1 +cos(-var.r)/3)/4*clamp(-4 +sin(var.r +age/97)*8, 0, 1)*random(id) +if(limb_speed>0.5, sin(     var.ls*2)/8*limb_speed*(1+random(cos(id))), 0) +0.4*var.nov3",
			"right_brow.rz": "clamp( sin(var.r+age /110), 0, torad( 5)) +torad(5)*clamp(-4 +sin(var.r +age/97)*8, 0, 1)*random(id) +( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2 +torad(5)*var.nov3",
			"left_brow.rz": " clamp(-sin(var.r+age /110), torad(-5), 0) -torad(5)*clamp(-4 +sin(var.r +age/97)*8, 0, 1)*random(id) -( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2 -torad(5)*var.nov3"
		},
		{
			"var.blink": "pow( clamp(( 1.5 -abs(sin(var.r+age/8)*6))*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1), 0, 1), 2 )",
			"var.eye_top": "( clamp(head_pitch/60, -0.8, 0.5) +clamp(2*var.nov1, 0, 0.3) +0.3*var.nov3 +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) )*(1-var.blink) +var.blink",
			"var.pupil_y": "  clamp(head_pitch/80, -0.5, 0.5) +var.eye_top/2 +( -cos(var.r+var.b +sin(var.r+var.b) )/4 )*var.nov2 +clamp(2*var.nov1, 0, 0.3) +(-1 -cos(limb_swing/3)/2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"var.pupil_x": "-var.hy/(80 +160*var.ylook) +(-sin(pi/4+var.r+age/10)*3 )*clamp(var.nov1*4, 0, 1)",
			"var.r_pupil_x": "var.pupil_x -0.3*clamp(var.nov1*4, 0, 1)",
			"var.l_pupil_x": "var.pupil_x +0.3*clamp(var.nov1*4, 0, 1)",
			"r_eye_white.sy": "clamp(1 -var.eye_top, 0, 3 )",
			"l_eye_white.sy": "clamp(1 -var.eye_top*clamp(1-var.nov3*2, 0, 1) -clamp(-4+var.nov3*6, 0, 1), 0, 3 )",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.r_pupil_x+1,  0, 1 )-2",
			"l_pupil.tx": "clamp( var.l_pupil_x-1, -1, 0 )+2",
			"r_pupil.ty": "clamp( var.pupil_y+1, -r_eye_white.sy+1 +min( 0.4, r_eye_white.sy ), 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+1, -l_eye_white.sy+1 +min( 0.4, l_eye_white.sy ), 1 )",
			"r_pupil.sy": "min( clamp(1 +var.pupil_y +r_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), r_eye_white.sy )",
			"l_pupil.sy": "min( clamp(1 +var.pupil_y +l_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), l_eye_white.sy )",
			"r_pupil.sx": "clamp(1 +clamp(-var.r_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.l_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0",
			"var.distance": "clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) )-3, 0, 128 )",
			"face.tz": "-4 -var.distance/500",
			"r_pupil.tz": "-var.distance/500",
			"l_pupil.tz": "-var.distance/500",
			"right_brow.tz": "-var.distance/400",
			"left_brow.tz": " -var.distance/400"
		},
		{
			"var.pre_roty": "rot_y",
			"var.pre_headroty": "head.ry",
			"var.frame_counter_prev": "frame_counter"
		}
	]
}