{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.hy": "clamp(head_yaw,-90,90)",
			"var.testing": "0",
			"var.count_swim": "clamp(if(varb.fcc, var.count_swim, !is_riding&&!is_on_ground&&is_in_water, min(20, var.count_swim +0.04 *frame_time*20), max(0, var.count_swim -0.04 *frame_time*20)), 0, 1)",
			"var.scared": "    clamp(if(varb.fcc, var.scared    , limb_speed>0.9                        , min(20, var.scared     +0.1  *frame_time*20), max(0, var.scared     -0.1  *frame_time*20)), 0, 1)",
			"var.r": "pi*random(id)*4",
			"var.b": "age /(11 -random(id)*2)*if(is_child, 1.5, 1)",
			"var.ls": "limb_swing/if(is_child, 2, 1)/if( limb_speed>0.75, 1.4 +(0.2*random(id)), 1.1 +(0.2*random(id)) )",
			"var.swim": "limb_swing/if(is_child, 2, 1)/2 +age/if(is_child, 2, 3)",
			"var.walk": "clamp(limb_speed*6, 0, 1)*if(is_child, clamp(2.5-limb_speed*4, 0, 1), clamp(9-limb_speed*10, 0, 1))",
			"var.run": "if(is_child, clamp(-1.5+limb_speed*4, 0, 1), clamp(-4+limb_speed*5, 0, 1))",
			"var.dance": "if(is_child, clamp(-2 +sin((pi*random(id)*2) +age/420)*10, 0, 1)*clamp(limb_speed*6, 0, 1), between(random(id), 0.3, 0.8), clamp(-4 +sin(var.r +age/330)*10, 0, 1)*var.walk, 0)*(1-var.scared)",
			"var.ylook": "clamp(sin(var.r+age/60)*6, 0, 1)*1.2",
			"var.nope": "(0.5-0.5*cos( clamp(-239 +cos(var.r+age/411)*240, 0, 1)*pi ))/2*clamp(1-limb_speed*4, 0, 1)",
			"var.yep": " (0.5-0.5*cos( clamp(-239 +sin(var.r+age/274)*240, 0, 1)*pi ))/2*clamp(1-limb_speed*4, 0, 1)",
			"var.nov1": "if(!is_child&&random(id)<0.4, (0.5-0.5*cos( clamp(-5.6 +cos(-pi/6 +var.r +age  /80 )*6 , 0, 1)*pi ))*clamp(2-limb_speed*4, 0, 1), 0)",
			"var.nov2": "if(           random(id)<0.7, (0.5-0.5*cos( clamp(-78  +cos(-pi/4 +var.r +var.b/20 )*80, 0, 1)*pi ))*clamp(1-limb_speed*2, 0, 1), 0)",
			"var.nov3": "                              (0.5-0.5*cos( clamp(-7.5 +sin(       var.r +age  /67 )*10, 0, 1)*pi ))*clamp(2-limb_speed*4, 0, 1)",
			"var.yrot_offset": "if( varb.fcc, var.yrot_offset, var.yrot_offset +if( between( var.pre_roty-rot_y, -pi*2, -pi*2+0.2 ), -pi*2, between( var.pre_roty-rot_y, pi*2-0.2, pi*2 ), pi*2, 0 ) )",
			"var.roty": "rot_y +var.yrot_offset",
			"var.head_rot": "if( varb.fcc, var.head_rot, age<9, var.pre_headroty+if(is_riding,0,var.roty), (var.pre_headroty+if(is_riding,0,var.roty))*min(1,frame_time*16) +var.head_rot*max(0,1-frame_time*16) )",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"head.rx": "torad(head_pitch)/1.5 +if(!is_riding&&!is_on_ground&&is_in_water, cos(var.swim*2)/30 +torad(-10) +torad(10*clamp(limb_speed*8, 0, 1)), if(var.scared>0||between(random(id), 0, 0.2), -torad(10)*if(var.scared>0, var.scared, clamp(sin(limb_speed*3), 0, 1)), 0) +sin(var.ls*2)/20*limb_speed )    +if(between(random(id), 0.1, 0.6), -torad(5)*clamp(-1+limb_speed*2, 0, 1), 0) +(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b))/4 -torad(10) )*var.nov2 +if(is_child, 0, torad(20))*var.nope +sin(var.r+age/1.2)/6*clamp(1-sin(var.r+age/6 +cos(var.r+age/12)), 0, 1)*var.yep +cos(pi/4 +var.ls*2 +cos(var.ls*2)/3)/6*var.dance +torad(-20)*var.nov3",
			"head.ry": "torad(var.hy)/(1.8 -0.6*var.ylook) +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/6 *var.nov1 +sin(age*0.45)/3*var.nope                                            -sin(-pi/6 +var.r +age/15 +sin(-pi/6 +var.r*2 +age/15*2)/1.5)/3*var.nov3",
			"head.rz": "sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 +cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +sin(var.ls)/4*var.dance -sin(       var.r +age/15 +sin(       var.r*2 +age/15*2)/1.5)/8*var.nov3",
			"head.tx": "sin(pi/4+var.ls)/3*limb_speed +cos(-pi/4 +var.ls +cos(var.ls*2)/6)*var.dance",
			"head.ty": "if(!is_riding&&!is_on_ground&&is_in_water, -sin(var.swim*2)/2          , 0.3) +if(is_riding, 8, 0) +if(is_child, 8, 14)*var.count_swim +(limb_speed*if(is_child, 3, 1) -cos(-pi/4 +var.ls*2 -sin(var.ls*2)/4))/if(is_child, 1, 3)*if(between(random(id), 0, 0.2), 0.7, 1.5)*var.walk -sin(torad(if(is_child||limb_speed>0.75, -45, 45))+var.ls*2 +cos(var.ls*2)/3)*if(is_child, 2.4, 1.2)*var.run +sin(var.r +var.b)/6 +( cos(var.r+var.b +sin(var.r+var.b)*1.5)/2 +0.5 )*var.nov2",
			"head.tz": "if(!is_riding&&!is_on_ground&&is_in_water, -1*clamp(limb_speed*8, 0, 1), -clamp(limb_speed*2, 0, 1)*if(is_child, 0.5, 0) -sin(var.r +var.b)/6 -cos(var.ls*2)/2*clamp(limb_speed*3, 0, 1)*if(between(random(id), 0.1, 0.6), var.run, 0) +0.5*clamp(-1+random(id)*2, 0, 1)*clamp(-1+limb_speed*2, 0, 1) +if(between(random(id), 0.1, 0.6), -1.6*limb_speed, -0.6*var.run ) +clamp(torad(-head_pitch)*3, -2, 0)/2 ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +sin(var.r+age/1.2)/3*clamp(1-sin(var.r+age/6 +cos(var.r+age/12)), 0, 1)*var.yep",
			"head.sx": "if(is_child, 1.5, 1)",
			"head.sy": "head.sx",
			"head.sz": "head.sx",
			"nose.ty": "0",
			"body.rx": "         if(!is_riding&&!is_on_ground&&is_in_water,          torad(20)*clamp(limb_speed*8, 0, 1), sin(var.r +var.b)/60 +cos(var.ls*2)/18*limb_speed*if(between(random(id), 0.1, 0.6), var.run, 0) +if(between(random(id), 0.1, 0.6), torad(10)*limb_speed, torad(-5)*clamp(1-limb_speed*2, 0, 1)*clamp(-1+random(id)*2, 0, 1) ) +clamp(torad(head_pitch)/4, 0, pi/20)/3 ) +( cos(var.r+var.b +sin(var.r+var.b))/12 )*var.nov2 -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -sin(var.r+age/1.2)/40*clamp(1-sin(var.r+age/6 +cos(var.r+age/12)), 0, 1)*var.yep",
			"body.ry": "         if(!is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/8                           , -sin(var.ls)/4*limb_speed*var.run*if(between(random(id), 0.1, 0.6), 0, 1) +clamp(torad(var.hy)/12*clamp(1-limb_speed*2, 0, 1), -pi/16, pi/16) ) -cos(var.ls)/6*var.dance +sin(-pi/4+age*0.45)/10*var.nope +cos(var.r +age/15                            )/10*var.nov3",
			"body.rz": "head.rz +if(!is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/30*clamp(limb_speed*8, 0, 1), 0) +(-sin(var.ls)/4 +cos(-pi/4 +var.ls +cos(var.ls*2)/6)/9 )*var.dance -sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)         +sin(var.r +age/15 +sin(var.r*2 +age/15*2)/1.5)/8 *var.nov3",
			"body.tx": "head.tx",
			"body.ty": "head.ty +(0.15*limb_speed) -cos(torad(if(limb_speed>0.5, -45, 45))+var.ls*2 +cos(var.ls*2)/2)/1.5/2*limb_speed",
			"body.tz": "head.tz -clamp(torad(-head_pitch)*3, -2, 0)/4"
		},
		{
			"arms.tx": "body.tx",
			"arms.ty": "body.ty +0.7*random(id) +0.3 -22.75 +sin(var.r +var.b-torad(60))/7 +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) -0.8 )*var.nov2 +24.5",
			"arms.tz": "body.tz -0.5*random(id) -0.75",
			"arms.rx": "body.rx +if(!is_riding&&!is_on_ground&&is_in_water, sin(pi/4+var.swim*2  )/16 -torad(20) -body.rx, (-sin(torad(-45)+var.ls*2 -sin(var.ls*2)/3)/8 -torad(5 +15*random(id)))*limb_speed ) +cos(pi/4 +var.ls*2)/8*var.dance +torad(-40 -15*random(id)) +( sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +torad(5)*var.nov3 +pi/16",
			"arms.ry": "body.ry +if(!is_riding&&!is_on_ground&&is_in_water, sin(pi/4+var.swim  +sin(pi/4+var.swim*2)/3)/6,  -sin(torad( 45)+var.ls)/3*limb_speed*var.run *if(between(random(id), 0.1, 0.6), 0, 1)     ) -sin(var.ls)/4*var.dance +clamp(torad(var.hy)/6*clamp(1-limb_speed*2, 0, 1), -pi/8, pi/8) +sin(-pi/2+age*0.45)/10*var.nope",
			"arms.rz": "body.rz",
			"arms_rotation.rx": "-pi/16",
			"arms_rotation.ty": "-24.8",
			"arms_rotation.tz": "0.43"
		},
		{
			"right_leg.rx": "if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, (torad(1)+sin(var.r +var.b)/60)*clamp(1-limb_speed*6, 0, 1) +asin( sin(var.ls))/2.8*(0.2+0.8*var.walk) +(  sin(var.ls)/(1.2-(0.15*var.walk))/1.8 )*var.run +clamp(-cos(var.ls)/2*clamp(limb_speed*1.5, 0, 1), 0, pi/4)  +torad(15)/(3+(3*var.walk))*clamp(-0.5+limb_speed*2, 0, 1) -torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(2)*random(id) +if( is_riding, 0, ( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2 )",
			"left_leg.rx": " if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, (torad(1)+sin(var.r +var.b)/60)*clamp(1-limb_speed*6, 0, 1) +asin(-sin(var.ls))/2.8*(0.2+0.8*var.walk) +( -sin(var.ls)/(1.2-(0.15*var.walk))/1.8 )*var.run +clamp( cos(var.ls)/2*clamp(limb_speed*1.5, 0, 1), 0, pi/4)  +torad(15)/(3+(3*var.walk))*clamp(-0.5+limb_speed*2, 0, 1) +torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(2)*random(id) +if( is_riding, 0, ( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2 )",
			"right_leg.ry": "if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0,  torad(var.hy)/6 /2*clamp(1-limb_speed*2, 0, 1) +torad( 8-5*random(id))*clamp(1-limb_speed*4, 0, 1) )",
			"left_leg.ry": " if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0,  torad(var.hy)/6 /2*clamp(1-limb_speed*2, 0, 1) +torad(-8+5*random(id))*clamp(1-limb_speed*4, 0, 1) )",
			"right_leg.rz": "if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, -torad(var.hy)/45/2.5*clamp(1-limb_speed*2, 0, 1) +(head.tx -cos(-pi/4 +var.ls +cos(var.ls*2)/6)*1.5*var.dance)/10 )",
			"left_leg.rz": " if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, -torad(var.hy)/45/2.5*clamp(1-limb_speed*2, 0, 1) +(head.tx -cos(-pi/4 +var.ls +cos(var.ls*2)/6)*1.5*var.dance)/10 )",
			"right_leg.tx": "-2",
			"left_leg.tx": "  2",
			"right_leg.ty": "24 +if(!is_riding&&!is_on_ground&&is_in_water, body.ty-if(is_child, 8, 14)*var.count_swim -0.8*clamp(limb_speed*8, 0, 1), clamp( cos(var.ls)*2*var.walk +(-sin(torad(-30)+var.ls)*2 +head.ty -2 )/1.2*var.run, -8, 0.2)    ) +if(is_riding, 8, 0) +if(is_child, 8, 14)*var.count_swim -sin(hurt_time*pi/10)*2",
			"left_leg.ty": " 24 +if(!is_riding&&!is_on_ground&&is_in_water, body.ty-if(is_child, 8, 14)*var.count_swim -0.8*clamp(limb_speed*8, 0, 1), clamp(-cos(var.ls)*2*var.walk +( sin(torad(-30)+var.ls)*2 +head.ty -2 )/1.2*var.run, -8, 0.2)    ) +if(is_riding, 8, 0) +if(is_child, 8, 14)*var.count_swim -sin(hurt_time*pi/10)*2",
			"right_leg.tz": "    if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 -sin(pi/4+var.swim) -cos(pi/4+var.swim), asin( sin(var.ls))*4*(0.2+0.8*var.walk)                +(-1 +sin(var.ls)*8.2 )/1.8*var.run +limb_speed*4/(2+(3*var.walk)))",
			"left_leg.tz": "     if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 +sin(pi/4+var.swim) +cos(pi/4+var.swim), asin(-sin(var.ls))*4*(0.2+0.8*var.walk)                +(-1 -sin(var.ls)*8.2 )/1.8*var.run +limb_speed*4/(2+(3*var.walk)))",
			"right_leg2.rx": "if(is_riding, -torad(85), !is_riding&&!is_on_ground&&is_in_water,  cos(pi/4+var.swim-sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), if(between(random(id), 0.1, 0.6), torad(10)*var.run, 0) +sin(pi/4 +var.ls +sin(pi/4 +var.ls)/2)/1.3*var.run/3 ) +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rx": " if(is_riding, -torad(85), !is_riding&&!is_on_ground&&is_in_water, -cos(pi/4+var.swim+sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), if(between(random(id), 0.1, 0.6), torad(10)*var.run, 0) -sin(pi/4 +var.ls -sin(pi/4 +var.ls)/2)/1.3*var.run/3 ) +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_leg2.ry": "if(is_riding,  torad(20), !is_riding&&!is_on_ground&&is_in_water, body.ry, 0)",
			"left_leg2.ry": " if(is_riding, -torad(20), !is_riding&&!is_on_ground&&is_in_water, body.ry, 0)",
			"right_leg2.rz": "if(is_riding,  0        , !is_riding&&!is_on_ground&&is_in_water, 0,  torad( 1-2*random(id))*clamp(1-limb_speed*4, 0, 1)) -(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rz": " if(is_riding,  0        , !is_riding&&!is_on_ground&&is_in_water, 0, -torad( 1-2*random(id))*clamp(1-limb_speed*4, 0, 1)) +(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
		},
		{
			"nose2.rx": "      cos(var.ls*2)/8*limb_speed +clamp(-torad(head_pitch)/3 +( -cos(pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2, -pi/4, pi/40) +(-cos(limb_swing/2)/4 -torad(20))*2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -cos(var.r+age/1.2)/6*clamp(1-sin(var.r+age/6 +cos(var.r+age/12)), 0, 1)*var.yep",
			"nose2.rz": "clamp(cos(var.ls  )/6*limb_speed -torad(var.hy)/6*clamp(2-limb_speed*4, -1.5, 0) +(var.head_rot-var.pre_headroty-if(is_riding,0,var.roty))*2, -pi/4, pi/4)/2 -head.rz/2*clamp(1-var.nope*2, 0, 1)",
			"mouth.rz": "(clamp(var.hy/500, torad(-10), torad(10)) +torad(7)*clamp(-sin(-torad(1) +var.r+age/100)*20, 0, 1) )*(1-2*random(id))",
			"mouth.tx": "(1-2*random(id))/1.2*var.nope",
			"mouth.ty": "1 +0.5*var.scared +0.2*clamp(-sin(var.r+age/100)*20, 0, 1) -0.3*var.nope",
			"right_brow.tx": "-2 +( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2 +0.1*var.nov3",
			"left_brow.tx": "-right_brow.tx",
			"var.brows_y": "  -0.5 +if(is_child, -0.25 -0.25*clamp(cos(var.r+age/120)*10, 0, 1), 0) +clamp( 1 -sin(var.r+age /110)*4, -0.3, 0 ) +clamp(head_pitch/30*(1 -2*clamp(sin(var.r+age/73)*3, 0, 1)), -0.8, -0.3*clamp(sin(var.r+age/73)*3, 0, 1))*1.2 +(-1.2-1*random(id) +sin(pi/4+var.ls*2)/(1+random(id)*2)*limb_speed )*var.scared -sin(hurt_time*pi/10)*(1.5 +sin(limb_swing/3)) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1 +if(is_child, 0, 0.25)*var.nope +if(is_child, -0.75, 0)*clamp(limb_speed*6, 0, 1)",
			"brow.ty": "      var.brows_y +(clamp(-torad(var.hy)/2, -0.5, 0  )                                                         +clamp( torad(var.hy)/2, -0.5, 0))*clamp(-sin(var.r+age/80)*6, 0, 1)",
			"right_brow.ty": "var.brows_y +(clamp(-torad(var.hy)/2, -0.5, 0.2)*(0.3+0.7*random(id)) +clamp(-torad(var.hy)/2, -0.5, 0)  +clamp( torad(var.hy)/2, -0.5, 0))*clamp(-sin(var.r+age/80)*6, 0, 1)",
			"left_brow.ty": " var.brows_y +(clamp( torad(var.hy)/2, -0.5, 0.2)*(0.3+0.7*random(id)) +clamp(-torad(var.hy)/2, -0.5, 0)  +clamp( torad(var.hy)/2, -0.5, 0))*clamp(-sin(var.r+age/80)*6, 0, 1)",
			"brow.rz": "torad(clamp( var.hy/9, -10, 10)*(0.3+0.7*random(id)))*clamp(-sin(var.r+age/80)*6, 0, 1)        +(          sin(var.ls +cos(var.ls/1.25))/(2.5-random(id)*2)/6          )*var.scared -sin(limb_swing/1.5)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_brow.rz": "(torad(-2 -5*random(id)) -sin(pi/4+var.ls*2)/12)*var.scared            +clamp(   sin(var.r+age /110), torad(-5), 0)/3 -torad(5*random(id))/3*clamp(-4 +sin(var.r +age/97)*8, 0, 1) +( cos(-pi/3 +var.r+var.b )/14 -torad(2) )*var.nov2",
			"left_brow.rz": " (torad( 2 +5*random(id)) +sin(pi/2+var.ls*2)/12)*var.scared            +clamp(  -sin(var.r+age /110), 0, torad( 5))/3 +torad(5*random(id))/3*clamp(-4 +sin(var.r +age/97)*8, 0, 1) -( cos(-pi/3 +var.r+var.b )/14 -torad(2) )*var.nov2"
		},
		{
			"var.blink": "pow( clamp(( 1.5 -abs(sin(var.r+age/8)*6))*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1), 0, 1), 2 )",
			"var.eyes_top": "clamp(head_pitch/60*(1 -2*clamp(sin(var.r+age/73)*3, 0, 1)), -0.2 -0.6*random(id), 0.3*random(id)*-clamp(sin(var.r+age/73)*3, 0, 1)) +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +clamp(2*var.nov1, 0, 0.3) +if(is_child, 0, 0.25)*var.nope +if(is_child, -0.25*clamp(cos(var.r+age/120)*10, 0, 1) -0.5*clamp(limb_speed*6, 0, 1), 0)",
			"var.r_eye_top": "( var.eyes_top  +(-0.5-1*random(id) -sin(var.ls +cos(var.ls/1.25))/6 -sin(var.r/1.3)/6 +sin(var.ls*2)/4)*var.scared )*(1-var.blink) +var.blink",
			"var.l_eye_top": "( var.eyes_top  +(-0.5-1*random(id) +sin(var.ls +cos(var.ls/1.25))/6 +sin(var.r/1.3)/6 +sin(var.ls*2)/4)*var.scared )*(1-var.blink) +var.blink",
			"var.pupil_y": "clamp(head_pitch/80, -0.3 -0.2*random(id), 0.5)/(1 +clamp(sin(var.r+age/73)*3, 0, 1)*2) +clamp(sin(var.r+age/38) +sin(var.r+age/13), -0.1, 0.1)*clamp(-20*2 -cos(var.r+age/125)*30*2, 0, 1) -clamp(-24 +sin(var.r+age/100)*40, 0, 1)/10                                   -0.25 *var.nov3 +(-0.3 -sin(var.ls*2)/6)*var.scared +(-1 -cos(limb_swing/3)/2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +( -cos(var.r+var.b +sin(var.r+var.b) )/4 )*var.nov2 +clamp(2*var.nov1, 0, 0.3) -if(between(random(id), 0, 0.2), -torad(10)*clamp(sin(limb_speed*3), 0, 1), 0) +if(is_child, 0, 0.5)*var.nope +if(is_child, -0.25, 0)*clamp(limb_speed*6, 0, 1)",
			"var.pupil_x": "         -var.hy/(80 +160*var.ylook)                                                    +clamp(sin(var.r+age/27) +sin(var.r+age/16), -0.1, 0.1)*clamp(-20*2 -cos(var.r+age/125)*30*2, 0, 1)*clamp(59*4 -sin(var.r+age/187)*60*4, 0, 1) +clamp(sin(var.r +age/15)*6, -0.25, 0.25)*var.nov3",
			"var.r_pupil_x": "var.pupil_x +(-sin(pi/4+var.r+age/10)*3 -0.3 )*clamp(var.nov1*4, 0, 1) -0.3*var.scared",
			"var.l_pupil_x": "var.pupil_x +(-sin(pi/4+var.r+age/10)*3 +0.3 )*clamp(var.nov1*4, 0, 1) +0.3*var.scared",
			"r_eye_white.sy": "clamp(1 -var.r_eye_top, 0, 3 )",
			"l_eye_white.sy": "clamp(1 -var.l_eye_top, 0, 3 )",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.r_pupil_x+1,  0, 1 )-2",
			"l_pupil.tx": "clamp( var.l_pupil_x-1, -1, 0 )+2",
			"r_pupil.ty": "clamp( var.pupil_y+1, -r_eye_white.sy+1 +min( 0.4 +0.6*var.scared, r_eye_white.sy ), 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+1, -l_eye_white.sy+1 +min( 0.4 +0.6*var.scared, l_eye_white.sy ), 1 )",
			"r_pupil.sy": "min( clamp(1 +var.pupil_y +r_eye_white.sy-1, 0.4 +0.6*var.scared, clamp( -var.pupil_y+1, 0.5 +0.5*var.scared, 1 ) ) -0.2*var.scared, r_eye_white.sy )",
			"l_pupil.sy": "min( clamp(1 +var.pupil_y +l_eye_white.sy-1, 0.4 +0.6*var.scared, clamp( -var.pupil_y+1, 0.5 +0.5*var.scared, 1 ) ) -0.2*var.scared, l_eye_white.sy )",
			"r_pupil.sx": "clamp(1 +clamp(-var.r_pupil_x, -0.2, 0 )*(1-var.scared) -0.2*var.scared, 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.l_pupil_x, -0.2, 0 )*(1-var.scared) -0.2*var.scared, 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0",
			"var.distance": "clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) )-3, 0, 128 )",
			"face.tz": "-4 -var.distance/500",
			"r_pupil.tz": "-var.distance/500",
			"l_pupil.tz": "-var.distance/500",
			"brow.tz": "-var.distance/400",
			"right_brow.tz": "brow.tz",
			"left_brow.tz": "brow.tz"
		},
		{
			"var.pre_roty": "rot_y",
			"var.pre_headroty": "head.ry",
			"var.frame_counter_prev": "frame_counter"
		}
	]
}