{
	"credit": "Created by FreshLX for Fresh Animations",
	"animations": [
		{
			"varb.fcc": "frame_counter == var.frame_counter_prev",
			"var.hy": "clamp(head_yaw,-90,90)",
			"var.testing": "0",
			"varb.swim": "! is_riding && ! is_on_ground && is_in_water",
			"var.c_swim": "clamp(if(varb.fcc, var.c_swim, varb.swim, min(20, var.c_swim  +0.2 *frame_time*20), max(0, var.c_swim  -0.2 *frame_time*20)), 0, 1)",
			"var.r": "pi*random(id)*4",
			"var.b": "age /(11 -random(id)*2)",
			"var.ls": "limb_swing/if( limb_speed>0.85, 1, 1.2 )",
			"var.swim": "limb_swing/2 +age/3",
			"var.walk": "clamp(limb_speed*6, 0, 1)*clamp(9-limb_speed*10, 0, 1)",
			"var.ylook": "(0.5-0.5*cos( clamp(sin(var.r+age/60)*6, 0, 1)*pi ))*1.2",
			"var.nov1": "(0.5-0.5*cos( if(right_arm.visible, 0, clamp(-5.6 +cos(-pi/6 +var.r   +age/80)*6 , 0, 1))*pi ))*clamp(2-limb_speed*4, 0, 1)",
			"var.nov2": "(0.5-0.5*cos(                          clamp(-19  +cos(-pi/4 +var.r +var.b/10)*20, 0, 1) *pi ))*clamp(1-limb_speed*2, 0, 1)",
			"var.spellA": "clamp(if(varb.fcc, var.spellA, right_arm.visible, min(20, var.spellA +0.1 *frame_time*20), max(0, var.spellA -0.1 *frame_time*20)), 0, 1)",
			"var.spell": "(0.5-0.5*cos( var.spellA*pi ))",
			"var.cast": "var.r+age/(1.4 +0.4*random(id))",
			"var.yrot_offset": "if( varb.fcc, var.yrot_offset, var.yrot_offset +if( between( var.pre_roty-rot_y, -pi*2, -pi*2+0.2 ), -pi*2, between( var.pre_roty-rot_y, pi*2-0.2, pi*2 ), pi*2, 0 ) )",
			"var.roty": "rot_y +var.yrot_offset",
			"var.head_rot": "if( varb.fcc, var.head_rot, age<9, var.pre_headroty+if(is_riding,0,var.roty), (var.pre_headroty+if(is_riding,0,var.roty))*min(1,frame_time*16) +var.head_rot*max(0,1-frame_time*16) )",
			"var.Created_by_FreshLX_for_Fresh_Animations": "0"
		},
		{
			"head.rx": "torad(head_pitch)/1.5 +sin(var.ls*2)/20*limb_speed +if(varb.swim, cos(var.swim*2)/30 +torad(-10) +torad(10*clamp(limb_speed*8, 0, 1)), (-torad(5 +15*random(id))*clamp(sin(limb_speed*3), 0, 1) )) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b))/4 -torad(10) )*var.nov2 +(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(-torad(8)*cos(var.spell*pi*1.5) -torad(10) )*clamp(var.spell*3, 0, 1)",
			"head.ry": "torad(var.hy)/(1.8 -0.5*clamp(var.ylook +var.spell, 0, 1)) +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/6 *var.nov1 +(-cos(var.cast)/10 )*clamp(-3+var.spell*4, 0, 1)",
			"head.rz": "                                                            sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 +cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"head.tx": "sin(torad(45)+var.ls)/3*limb_speed +(-cos(pi/4 +var.cast) )*clamp(-3+var.spell*4, 0, 1)",
			"head.ty": "if(varb.swim, -sin(var.swim*2)/2          , 0.3) +14*var.c_swim +limb_speed*var.walk -sin(torad(if(limb_speed>0.5, -45, 45))+var.ls*2)/(1+(2*var.walk))*limb_speed +sin(var.r +var.b)/6 +( cos(var.r+var.b +sin(var.r+var.b)*1.5)/2 +0.5 )*var.nov2",
			"head.tz": "if(varb.swim, -1*clamp(limb_speed*8, 0, 1), (-1.5*limb_speed) -sin(var.r +var.b)/6 -cos(var.ls*2)/2*clamp(limb_speed*3, 0, 1) +0.5*random(id) +clamp(-1+limb_speed*2, 0, 1) +clamp(torad(-head_pitch)*3, -2, 0) ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(-sin(var.spell*pi*1.5) -1 )*clamp(var.spell*3, 0, 1)",
			"nose.ty": "head.ty*var.testing",
			"body.rx": "         if(varb.swim, torad(20          *clamp(limb_speed*8, 0, 1)), sin(var.r +var.b)/60 +cos(var.ls*2)/18*limb_speed +torad(-5*random(id))*clamp(1-limb_speed*2, 0, 1) +clamp(torad(head_pitch)/4, 0, pi/20) ) +( cos(var.r+var.b +sin(var.r+var.b))/12 )*var.nov2 -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +(-torad(5)*-sin(var.spell*pi*1.5) +torad(5) )*clamp(var.spell*3, 0, 1)",
			"body.ry": "         if(varb.swim, sin(var.swim  )/8                            ,                      -sin(var.ls  )/4 *limb_speed*clamp(-4+limb_speed*5, 0, 1) +torad(var.hy)/6/2*clamp(1-limb_speed*2, 0, 1) )                       +(-cos(var.cast)/8                          )*clamp(-3+var.spell*4, 0, 1)",
			"body.rz": "head.rz +if(varb.swim, sin(var.swim  )/30*clamp(limb_speed*8, 0, 1) , 0) -sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +( cos(var.cast)/60 -cos(pi/4 +var.cast)/13 )*clamp(-3+var.spell*4, 0, 1)",
			"body.tx": "head.tx",
			"body.ty": "head.ty +( 0.15 -cos(torad(if(limb_speed>0.5, -45, 45))+var.ls*2 +cos(var.ls*2)/2)/3 )*limb_speed",
			"body.tz": "head.tz +  0.25 *limb_speed",
			"nose.rx": "head.rx*var.testing",
			"nose.ry": "head.ry*var.testing",
			"nose.rz": "head.rz*var.testing",
			"nose.tx": "head.tx*var.testing",
			"nose.tz": "head.tz*var.testing"
		},
		{
			"right_arm.visible": "var.spell>=0.2",
			"left_arm.visible": "var.spell>=0.2",
			"arms.visible": "   var.spell< 0.2",
			"right_arm.sy": "1-clamp(-0.5+var.spell*2, 0, 1)*0.15",
			"left_arm.sy": " 1-clamp(-0.5+var.spell*2, 0, 1)*0.15",
			"right_arm.rx": "if(varb.swim, 0, if(is_riding, torad(-45), -sin(var.ls)*limb_speed/4 ) +torad(var.hy)/8  )  -torad(50 +150*sin(var.spell*2)) +sin(var.cast )/2*clamp(-2+var.spell*3, 0, 1)  +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*(1 -1.7*var.spell)",
			"left_arm.rx": " if(varb.swim, 0, if(is_riding, torad(-45),  sin(var.ls)*limb_speed/4 ) -torad(var.hy)/8  )  -torad(50 +150*sin(var.spell*2)) -sin(var.cast )/2*clamp(-2+var.spell*3, 0, 1)  +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*(1 -1.7*var.spell)",
			"right_arm.ry": "if(varb.swim, 0, (-sin(var.ls -sin(var.ls)/2)/1.5*limb_speed)/2 +if(is_riding, -torad(20), 0) -torad(15)*clamp(limb_speed*4, 0, 1) +cos(var.r +var.b)/30 ) +torad(10) +sin(pi/4 +var.cast)/3*clamp(-2+var.spell*3, 0, 1)",
			"left_arm.ry": " if(varb.swim, 0, (-sin(var.ls +sin(var.ls)/2)/1.5*limb_speed)/2 +if(is_riding,  torad(20), 0) +torad(15)*clamp(limb_speed*4, 0, 1) -cos(var.r +var.b)/30 ) -torad(10) +sin(pi/4 +var.cast)/3*clamp(-2+var.spell*3, 0, 1)",
			"right_arm.rz": "-torad(head_pitch)/14 +torad(-37) +(-cos(var.cast)/2 )*clamp(-2+var.spell*3, 0, 1)",
			"left_arm.rz": "  torad(head_pitch)/14 +torad( 37) +(-cos(var.cast)/2 )*clamp(-2+var.spell*3, 0, 1)",
			"right_arm.tx": "body.tx -5.2 +if(varb.swim, 0, (-sin(var.ls)/2*limb_speed )*torad(var.hy)*clamp(1-limb_speed*2, 0, 1) -0.3 )",
			"left_arm.tx": " body.tx +5.2 +if(varb.swim, 0, ( sin(var.ls)/2*limb_speed )*torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +0.3 )",
			"right_arm.ty": "body.ty +3   +if(varb.swim, 0,                                                       sin(var.r +var.b-torad(60))/7                                            +if(is_riding,  1, 0) ) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2 -3*sin(var.spell*2)",
			"left_arm.ty": " body.ty +3   +if(varb.swim, 0,                                                       sin(var.r +var.b-torad(60))/7                                            +if(is_riding,  1, 0) ) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2 -3*sin(var.spell*2)",
			"right_arm.tz": "        -2   +if(varb.swim, 0, (-2*limb_speed)/3 -sin(torad(-30)+var.ls)*limb_speed -sin(var.r +var.b          )/6 +torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -2, 0) ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) -cos(var.cast)*clamp(-2+var.spell*3, 0, 1) +1.6*-sin(var.spell*pi*1.5)*var.spell",
			"left_arm.tz": "         -2   +if(varb.swim, 0, (-2*limb_speed)/3 +sin(torad(-30)+var.ls)*limb_speed -sin(var.r +var.b          )/6 -torad(var.hy)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -2, 0) ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) +cos(var.cast)*clamp(-2+var.spell*3, 0, 1) +1.6*-sin(var.spell*pi*1.5)*var.spell"
		},
		{
			"arms.rx": "body.rx",
			"arms.ry": "body.ry",
			"arms.rz": "body.rz",
			"arms.tx": "body.tx",
			"arms.ty": "body.ty",
			"arms.tz": "body.tz",
			"arms_rotation.tx": "0",
			"arms_rotation.ty": "-21.75 +sin(var.r +var.b-torad(60))/7 +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) -0.8 )*var.nov2",
			"arms_rotation.tz": "-0.5",
			"arms_rotation.rx": "if(varb.swim, sin(pi/4+var.swim*2  )/16 -torad(20) -body.rx, 0) +torad(-50 -120*sin(var.spell*2) +15*random(id) ) +( sin(torad(-45)+var.ls*2 -sin(var.ls*2)/3)/(6+(3*var.walk)) -torad(20))*limb_speed +( sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"arms_rotation.ry": "if(varb.swim, sin(pi/4+var.swim  +sin(pi/4+var.swim*2)/3)/6, 0) +torad(var.hy)/6*clamp(1-limb_speed*2, 0, 1) -sin(torad(45)+var.ls)/3*clamp(-4+limb_speed*5, 0, 1)",
			"arms_rotation.rz": "0"
		},
		{
			"right_leg.rx": "if(is_riding, 0, varb.swim, 0, (torad(1)+sin(var.r +var.b)/60) +asin( sin(var.ls))/2.5*var.walk +sin(var.ls)/(1.2-(0.15*var.walk))*clamp(-4+limb_speed*5, 0, 1) +clamp(-cos(var.ls)/5*clamp(limb_speed*1.5, 0, 1), 0, torad(45))/(1+(9*var.walk)) +torad(15)/(2+(3*var.walk))*clamp(-0.5+limb_speed*2, 0, 1) -torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(2)*random(id) +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
			"left_leg.rx": " if(is_riding, 0, varb.swim, 0, (torad(1)+sin(var.r +var.b)/60) +asin(-sin(var.ls))/2.5*var.walk -sin(var.ls)/(1.2-(0.15*var.walk))*clamp(-4+limb_speed*5, 0, 1) +clamp( cos(var.ls)/5*clamp(limb_speed*1.5, 0, 1), 0, torad(45))/(1+(9*var.walk)) +torad(15)/(2+(3*var.walk))*clamp(-0.5+limb_speed*2, 0, 1) +torad(var.hy)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(2)*random(id) +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
			"right_leg.ry": "if(is_riding, 0, varb.swim, 0,  torad(var.hy)/6 /2*clamp(1-limb_speed*2, 0, 1) +torad( 5-3*random(id))*clamp(1-limb_speed*4, 0, 1) )",
			"left_leg.ry": " if(is_riding, 0, varb.swim, 0,  torad(var.hy)/6 /2*clamp(1-limb_speed*2, 0, 1) +torad(-5+3*random(id))*clamp(1-limb_speed*4, 0, 1) )",
			"right_leg.rz": "if(is_riding, 0, varb.swim, 0, -torad(var.hy)/45/2.5*clamp(1-limb_speed*2, 0, 1) +cos(pi/8 +var.cast)/50*clamp(-3+var.spell*4, 0, 1) )",
			"left_leg.rz": " if(is_riding, 0, varb.swim, 0, -torad(var.hy)/45/2.5*clamp(1-limb_speed*2, 0, 1) +cos(pi/8 +var.cast)/50*clamp(-3+var.spell*4, 0, 1) )",
			"right_leg.tx": "-2",
			"left_leg.tx": "  2",
			"right_leg.ty": "24 +if(varb.swim, body.ty -0.8*clamp(limb_speed*8, 0, 1), clamp( cos(var.ls)*2*var.walk/2 +clamp(5-limb_speed*7, -2, 0)*1.5 +(-sin(torad(-30)+var.ls)*2 +head.ty)*clamp(-4+limb_speed*5, 0, 1), -8, 0.2) ) -sin(hurt_time*pi/10)*2",
			"left_leg.ty": " 24 +if(varb.swim, body.ty -0.8*clamp(limb_speed*8, 0, 1), clamp(-cos(var.ls)*2*var.walk/2 +clamp(5-limb_speed*7, -2, 0)*1.5 +( sin(torad(-30)+var.ls)*2 +head.ty)*clamp(-4+limb_speed*5, 0, 1), -8, 0.2) ) -sin(hurt_time*pi/10)*2",
			"right_leg.tz": "    if(varb.swim, todeg(body.rx)/6 -sin(pi/4+var.swim)/1.5, asin( sin(var.ls))*4*var.walk  +(-1 +sin(var.ls)*8.2 )*clamp(-4+limb_speed*5, 0, 1) +limb_speed*4/(2+(3*var.walk)))",
			"left_leg.tz": "     if(varb.swim, todeg(body.rx)/6 +sin(pi/4+var.swim)/1.5, asin(-sin(var.ls))*4*var.walk  +(-1 -sin(var.ls)*8.2 )*clamp(-4+limb_speed*5, 0, 1) +limb_speed*4/(2+(3*var.walk)))",
			"right_leg2.rx": "if(is_riding, -torad(80), varb.swim,  cos(pi/4+var.swim-sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rx": " if(is_riding, -torad(80), varb.swim, -cos(pi/4+var.swim+sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"right_leg2.ry": "if(is_riding,  torad(20), varb.swim, body.ry, 0)",
			"left_leg2.ry": " if(is_riding, -torad(20), varb.swim, body.ry, 0)",
			"right_leg2.rz": "-(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"left_leg2.rz": "  (sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
		},
		{
			"nose2.rx": "      cos(var.ls*2)/8*limb_speed +clamp(-torad(head_pitch)/3 +( -cos(pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2, -pi/4, pi/40) +(-cos(limb_swing/2)/4 -torad(20))*2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"nose2.rz": "clamp(cos(var.ls  )/6*limb_speed -torad(var.hy)/6*clamp(2-limb_speed*4, -1.5, 0) +(var.head_rot-var.pre_headroty-if(is_riding,0,var.roty))*2, -pi/4, pi/4)/2 -head.rz/2",
			"mouth.sy": "1    -0.25*clamp(-4 -sin(var.r+age/137)*28,  min(1, var.nov1*4 +var.nov2*4 ), max(0, 1 -var.spell*4 ) )",
			"right_brow.tx": "-2 +( 0.2)*clamp(var.spell*2, 0, 1) +( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2",
			"left_brow.tx": "-right_brow.tx",
			"var.brows_y": "-0.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 -sin(hurt_time*pi/10)*(1.5 +sin(limb_swing/3)) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1",
			"right_brow.ty": "var.brows_y +clamp(-torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +(-1 +sin(-var.r)/3)*var.spell +if(limb_speed>0.9, sin(pi/4+var.ls*2)/4*limb_speed*(1+random(sin(id))), 0)",
			"left_brow.ty": " var.brows_y +clamp( torad(var.hy)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +(-1 +cos(-var.r)/3)*var.spell +if(limb_speed>0.9, sin(     var.ls*2)/4*limb_speed*(1+random(cos(id))), 0)",
			"right_brow.rz": "clamp( sin(var.r+age /110), 0, torad( 5)) +torad( 10)*clamp(var.spell*2, 0, 1) +( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2",
			"left_brow.rz": " clamp(-sin(var.r+age /110), torad(-5), 0) +torad(-10)*clamp(var.spell*2, 0, 1) -( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2"
		},
		{
			"var.blink": "pow( clamp(( 1.5 -abs(sin(var.r+age/8)*6))*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1), 0, 1), 2 )",
			"var.eye_top": "( clamp(head_pitch/60, -0.8, 0.5) +(-0.2 +sin(-random(id))/4)*var.spell +clamp(2*var.nov1, 0, 0.3) +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0) )*(1-var.blink) +var.blink",
			"var.pupil_y": "  clamp(head_pitch/80, -0.5, 0.5) +var.eye_top/2 +(-0.3 +sin(-var.r)/2)/4*var.spell +( -cos(var.r+var.b +sin(var.r+var.b) )/4 )*var.nov2 +clamp(2*var.nov1, 0, 0.3) -(-torad(5 +15*random(id))*clamp(sin(limb_speed*3), 0, 1) ) +(-1 -cos(limb_swing/3)/2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
			"var.pupil_x": "-var.hy/(80 +160*clamp(var.ylook +var.spell, 0, 1)) +(-sin(pi/4+var.r+age/10)*3 )*clamp(var.nov1*4, 0, 1)",
			"var.r_pupil_x": "var.pupil_x -0.3*clamp(var.nov1*4, 0, 1)",
			"var.l_pupil_x": "var.pupil_x +0.3*clamp(var.nov1*4, 0, 1)",
			"r_eye_white.sy": "clamp(1 -var.eye_top, 0, 3 )",
			"l_eye_white.sy": "r_eye_white.sy",
			"r_eye_white.visible": "r_eye_white.sy!=0",
			"l_eye_white.visible": "l_eye_white.sy!=0",
			"r_pupil.tx": "clamp( var.r_pupil_x+1,  0, 1 )-2",
			"l_pupil.tx": "clamp( var.l_pupil_x-1, -1, 0 )+2",
			"r_pupil.ty": "clamp( var.pupil_y+1, -r_eye_white.sy+1 +min( 0.4, r_eye_white.sy ), 1 )",
			"l_pupil.ty": "clamp( var.pupil_y+1, -l_eye_white.sy+1 +min( 0.4, l_eye_white.sy ), 1 )",
			"r_pupil.sy": "min( clamp(1 +var.pupil_y +r_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), r_eye_white.sy )",
			"l_pupil.sy": "min( clamp(1 +var.pupil_y +l_eye_white.sy-1, 0.4, clamp( -var.pupil_y+1, 0.5, 1 ) ), l_eye_white.sy )",
			"r_pupil.sx": "clamp(1 +clamp(-var.r_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"l_pupil.sx": "clamp(1 +clamp( var.l_pupil_x, -0.2, 0 ), 0.5, 1 )",
			"r_pupil.visible": "r_pupil.sy!=0",
			"l_pupil.visible": "l_pupil.sy!=0",
			"var.distance": "clamp( sqrt( pow(pos_x-player_pos_x, 2) +pow(pos_y-player_pos_y, 2) +pow(pos_z-player_pos_z, 2) )-3, 0, 128 )",
			"face.tz": "-4 -var.distance/500",
			"r_pupil.tz": "-var.distance/500",
			"l_pupil.tz": "-var.distance/500",
			"right_brow.tz": "-var.distance/400",
			"left_brow.tz": " -var.distance/400"
		},
		{
			"var.pre_roty": "rot_y",
			"var.pre_headroty": "head.ry",
			"var.frame_counter_prev": "frame_counter"
		}
	]
}